{"version":3,"sources":["components/Message.js","views/smartconTables/Task.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","DashboardComments","useState","staff","setStaff","selectedItem","setSelectedItem","loggedInuser","useContext","AppContext","yesterdayNotes","setYesterdayNotes","value","setValue","checkWhichTab","index","getLastNotes","api","post","staff_id","then","res","data","status","catch","getStaff","date","moment","format","arr","obj","i","length","createKeysForTab","insertAttendance","elem","attendanceId","user","record_date","creation_date","modification_date","created_by","modified_by","attendance_id","changeNotes","e","noteType","target","notes","getPreviousNoteVal","selectedStaff","result","filter","completed_notes","in_progress_notes","useEffect","className","map","element","md","first_name","time_in","leave_time","color","size","onClick","sx","borderBottom","borderColor","onChange","event","newValue","key","handleChange","label","onFocus","onBlur","name","defaultValue","disabled"],"mappings":"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","file":"static/js/174.f3854c25.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Col, Row, Card, Input, Form, Button, CardBody } from 'reactstrap';\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Avatar from '@mui/material/Avatar';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport '../form-editor/editor.scss';\nimport moment from 'moment';\nimport { ToastContainer } from 'react-toastify';\nimport message from '../../components/Message';\nimport api from '../../constants/api';\nimport AppContext from '../../context/AppContext';\n\nconst DashboardComments = () => {\n  // All state variables\n  const [staff, setStaff] = useState();\n  const [selectedItem, setSelectedItem] = useState();\n  const { loggedInuser } = useContext(AppContext);\n  const [yesterdayNotes, setYesterdayNotes] = useState();\n  // const [attendanceData, setAttendanceData] = useState();\n\n  // const [editTask, setEditTask] = useState();\n  const [value, setValue] = useState({});\n\n  const handleChange = (event, newValue, key) => {\n    setValue({ ...value, [key]: newValue });\n  };\n\n  // const handleTabInputs = (e) => {\n  //   SetInvoiceData({ ...invoiceData, [e.target.name]: e.target.value });\n  // };\n  function createKeysForTab(arr) {\n    const obj = {};\n    for (let i = 0; i < arr.length; i++) {\n      obj[i] = 1;\n    }\n    setValue(obj);\n  }\n\n  function checkWhichTab(index) {\n    return value[index];\n  }\n  //   Api call for getting Yesterday Notes\n  const getLastNotes = () => {\n    api\n      .post('/attendance/getYesterdayNotes', {\n        staff_id: loggedInuser.staff_id,\n      })\n      .then((res) => {\n        if (res.data.status === '200') {\n          setYesterdayNotes(res.data.data);\n        }\n      })\n      .catch(() => {\n        message('Unable to edit record.', 'error');\n      });\n  };\n  //   Api call for getting Staff Data\n  const getStaff = () => {\n    api\n      .post('/attendance/getStaff', {\n        date: moment().format('DD-MM-YYYY'),\n      })\n      .then((res) => {\n        setStaff(res.data.data);\n        createKeysForTab(res.data.data);\n        getLastNotes();\n      })\n      .catch(() => {\n        message('Unable to edit record.', 'error');\n      });\n  };\n\n  const insertAttendance = (elem, attendanceId) => {\n    const user = {};\n    user.staff_id = elem.staff_id;\n    user.record_date = moment().format('h:mm:ss a');\n    user.creation_date = moment().format('DD-MM-YYYY');\n    user.modification_date = moment().format('DD-MM-YYYY');\n    user.created_by = elem.staff_id;\n    user.modified_by = elem.staff_id;\n    if (attendanceId !== '') {\n      user.attendance_id = attendanceId;\n    }\n    api\n      .post('/attendance/insertAttendance', user)\n      .then(() => {\n        message('Attendance inserted successfully.', 'success');\n        getStaff();\n      })\n      .catch(() => {\n        message('Network connection error.', 'error');\n      });\n  };\n\n  const changeNotes = (e, noteType) => {\n    if (e.target.value === '') {\n      message('Enter valid Notes', 'warning');\n    } else {\n      /* eslint-disable-next-line */\n      if (selectedItem.attendance_id) {\n        /* eslint-disable-next-line */\n        selectedItem.notes = e.target.value;\n        selectedItem.type = noteType;\n        /* eslint-disable-line */\n        api\n          .post('/attendance/editNotes', selectedItem)\n          .then(() => {\n            getLastNotes();\n            message('Task edited successfully.', 'success');\n          })\n          .catch(() => {\n            message('Cannot Update Data', 'error');\n          });\n      } else {\n        message('Please Login first', 'error');\n      }\n    }\n  };\n  const getPreviousNoteVal = (selectedStaff) => {\n    const result =\n      yesterdayNotes &&\n      yesterdayNotes.filter((obj) => {\n        return obj.staff_id === selectedStaff;\n      });\n    /* eslint-disable-next-line */\n    if (result) {\n      return result[0];\n    }\n    return { notes: '', completed_notes: '', in_progress_notes: '' };\n  };\n  useEffect(() => {\n    getStaff();\n  }, []);\n\n  return (\n    <>\n      <ToastContainer></ToastContainer>\n      <Card className=\"shadow-none\">\n        <Form>\n          <CardBody className=\"shadow-none\">\n            <Row>\n              {staff &&\n                staff.map((element, index) => {\n                  return (\n                    <Col md=\"4\" key={element.staff_id}>\n                      <Card\n                        key={element.staff_id}\n                        className=\"border border-gray shadow-none p-1 pt-2\"\n                      >\n                        <Row className=\"border-bottom border-gray p-2\">\n                          <Col md=\"9\">\n                            <span>\n                              <Row>\n                                <Col md=\"3\">\n                                  <Avatar />\n                                </Col>\n                                <Col md=\"9\">\n                                  <Row>\n                                    <b>{element.first_name}</b>\n                                  </Row>\n                                  <Row>\n                                    <span>designation</span>\n                                  </Row>\n                                </Col>\n                              </Row>\n                            </span>\n                          </Col>\n\n                          <Col md=\"3\">\n                            {loggedInuser.staff_id === element.staff_id &&\n                              (element.time_in && !element.leave_time ? (\n                                <Button\n                                  color=\"primary\"\n                                  className=\"shadow-none\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    insertAttendance(element, element.attendance_id);\n                                  }}\n                                >\n                                  Logout\n                                </Button>\n                              ) : !element.time_in ? (\n                                <Button\n                                  color=\"primary\"\n                                  className=\"shadow-none\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    insertAttendance(element, '');\n                                  }}\n                                >\n                                  Login\n                                </Button>\n                              ) : (\n                                <Button color=\"success\" className=\"shadow-none\" size=\"sm\">\n                                  Marked\n                                </Button>\n                              ))}\n                          </Col>\n                        </Row>\n                        <br></br>\n\n                        <div className=\"text-muted mb-3 card-subtitle\">\n                          <p>\n                            Time In:<code> {element.time_in ? element.time_in : ''}</code>{' '}\n                          </p>\n                          <p>\n                            Time Out:<code> {element.leave_time ? element.leave_time : ''}</code>{' '}\n                          </p>\n                        </div>\n\n                        <Row>\n                          <TabContext value={checkWhichTab(index) ?? 1}>\n                            <Box\n                              sx={{ borderBottom: 1, borderColor: 'divider' }}\n                              className=\"col-12\"\n                            >\n                              <TabList\n                                onChange={(event, newValue) => handleChange(event, newValue, index)}\n                                aria-label=\"lab API tabs example\"\n                              >\n                                <Tab label=\"Pending\" value={1} className=\"col-4\" />\n                                <Tab label=\"Progress\" value={2} className=\"col-4\" />\n                                <Tab label=\"Comments\" value={3} className=\"col-4\" />\n                              </TabList>\n                            </Box>\n                            <TabPanel value={1}>\n                              <Input\n                                onFocus={() => {\n                                  setSelectedItem(element);\n                                  // handleTabInputs(task_pending);\n                                }}\n                                onBlur={(e) => {\n                                  changeNotes(e, 'pending');\n                                }}\n                                type=\"textarea\"\n                                name=\"task_pending\"\n                                defaultValue={\n                                  getPreviousNoteVal(element.staff_id) &&\n                                  getPreviousNoteVal(element.staff_id).notes\n                                }\n                                disabled={loggedInuser.staff_id !== element.staff_id}\n                              />\n                            </TabPanel>\n                            <TabPanel value={2}>\n                              <Input\n                                onFocus={() => {\n                                  setSelectedItem(element);\n                                }}\n                                onBlur={(e) => {\n                                  changeNotes(e, 'inprogress');\n                                }}\n                                type=\"textarea\"\n                                name=\"task_progress\"\n                                defaultValue={\n                                  getPreviousNoteVal(element.staff_id) &&\n                                  getPreviousNoteVal(element.staff_id).in_progress_notes\n                                }\n                                disabled={loggedInuser.staff_id !== element.staff_id}\n                              />\n                            </TabPanel>\n                            <TabPanel value={3}>\n                              <Input\n                                onFocus={() => {\n                                  setSelectedItem(element);\n                                }}\n                                onBlur={(e) => {\n                                  changeNotes(e, 'completed');\n                                }}\n                                type=\"textarea\"\n                                name=\"task_complete\"\n                                defaultValue={\n                                  getPreviousNoteVal(element.staff_id) &&\n                                  getPreviousNoteVal(element.staff_id).completed_notes\n                                }\n                                disabled={loggedInuser.staff_id !== element.staff_id}\n                              />\n                            </TabPanel>\n                          </TabContext>\n                        </Row>\n                      </Card>\n                    </Col>\n                  );\n                })}\n            </Row>\n          </CardBody>\n        </Form>\n      </Card>\n    </>\n  );\n};\nexport default DashboardComments;\n"],"sourceRoot":""}