{"version":3,"sources":["../node_modules/clsx/dist/clsx.m.js","views/apps/calendar/CalendarApp.js"],"names":["r","e","t","f","n","Array","isArray","length","clsx","arguments","moment","locale","localizer","momentLocalizer","CalendarApp","id","useState","employees","setEmployees","eventData","setEventData","React","open","setOpen","title","setTitle","slot","setSlot","color","setColor","update","setUpdate","CalendarId","employeeId","api","post","project_id","employee_id","then","response","console","log","data","newEventData","map","item","task_title","start","Date","start_date","end","end_date","catch","error","useEffect","res","selectedTask","md","for","type","name","onChange","selectedId","target","value","element","first_name","selectable","events","defaultView","scrollToTime","defaultDate","style","height","onSelectEvent","event","newEditEvent","find","elem","editEvent","onSelectSlot","slotInfo","addNewEventAlert","eventPropGetter","className","eventColors","isOpen","toggle","onSubmit","preventDefault","newEvents","push","reset","placeholder","eColor","colorbg","size","onClick","Calendarid","outline","updatedEvents","filter","ind","deleteHandler","disabled"],"mappings":"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","file":"static/js/181.0686d001.chunk.js","sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Col\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './calendar.scss';\nimport api from '../../../constants/api';\n\n\nmoment.locale('en-GB');\nconst localizer = momentLocalizer(moment);\n\nconst CalendarApp = ({\n  id,\n}) => {\n  CalendarApp.propTypes = {\n    \n    id: PropTypes.any,\n  };\n\n  const [employees, setEmployees] = useState([]);\n  const [eventData, setEventData] = useState([]);\n  const [open, setOpen] = React.useState(false);\n  const [title, setTitle] = useState('');\n  const [slot, setSlot] = useState();\n  const [color, setColor] = useState('default');\n  const [update, setUpdate] = useState();\n\n  const ColorVariation = [\n    {\n      id: 1,\n      eColor: '#1a97f5',\n      value: 'primary',\n    },\n    {\n      id: 2,\n      eColor: '#00ab55',\n      value: 'success',\n    },\n    {\n      id: 3,\n      eColor: '#fc4b6c',\n      value: 'danger',\n    },\n    {\n      id: 4,\n      eColor: '#1e4db7',\n      value: 'info',\n    },\n    {\n      id: 5,\n      eColor: '#fdd43f',\n      value: 'warning',\n    },\n  ];\n\n  const addNewEventAlert = (slotInfo) => {\n    setOpen(true);\n    setSlot(slotInfo);\n  };\n\n  const editEvent = (event) => {\n    setOpen(true);\n    const newEditEvent = eventData.find((elem) => elem.title === event.title);\n    setColor(event.color);\n    setTitle(newEditEvent.title);\n    setColor(newEditEvent.color);\n    setUpdate(event);\n  };\n\n  const updateEvent = (e) => {\n    e.preventDefault();\n\n    setEventData(\n      eventData.map((elem) => {\n        if (elem.title === update.title) {\n          return { ...elem, title, color };\n        }\n        return elem;\n      }),\n    );\n    setOpen(false);\n    setTitle('');\n    setColor('');\n    setUpdate(null);\n  };\n\n  const inputChangeHandler = (e) => setTitle(e.target.value);\n\n  const selectinputChangeHandler = (Calendarid) => setColor(Calendarid);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    const newEvents = eventData;\n    newEvents.push({\n      title,\n      start: slot.start,\n      end: slot.end,\n      color,\n    });\n    setOpen(false);\n    e.target.reset();\n\n    setEventData(newEvents);\n    setTitle('');\n  };\n\n  const deleteHandler = (event) => {\n    const updatedEvents = eventData.filter((ind) => ind.title !== event.title);\n    setEventData(updatedEvents);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setTitle('');\n    setUpdate(null);\n  };\n\n  const eventColors = (event) => {\n    if (event.color) {\n      return { className: `event-${event.color}` };\n    }\n    return { className: 'event-default' };\n  };\n\n  const getJobs = () => {\n    api.post('projecttask/getEmployeeByID',{ project_id : id})\n    .then((res) => {\n      setEmployees(res.data.data);\n      })\n      .catch(() => {});\n  };\n\n  const CalendarId = (employeeId) => {\n    api\n      .post('/calendar/getCalendar',{ project_id: id , employee_id: employeeId  })\n      .then((response) => {\n        console.log('API Response:', response.data);\n        const { data } = response.data;\n        const newEventData = data.map((item) => ({\n          title: item.task_title, // Assuming the title is available in the API response\n          start: new Date(item.start_date), // Convert the from_date to a Date object\n          end: new Date(item.end_date), // Convert the to_date to a Date object\n          color: 'primary', // Set a default color for the events, you can modify this based on your use case\n        }));\n        console.log('New Event Data:', newEventData);\n        setEventData(newEventData);\n      })\n      .catch((error) => {\n        console.log('Error fetching data:', error);\n      });\n  }\n  useEffect(() => {\n    getJobs();     \n   }, [id]);\n   useEffect(() => {\n    if (employees.project_id) {\n      // Use taskdetails.project_id directly to get the selected project ID\n      const selectedTask = employees.project_id;\n      CalendarId(selectedTask);\n    }\n  }, [employees.project_id]);\n\n  \n  return (\n    <>\n<Col md=\"4\">\n<FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedId = e.target.value;\n                  CalendarId(selectedId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.project_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            </Col>\n      <Card>\n        <CardBody>\n        <Calendar\n  selectable\n  events={eventData}\n  defaultView=\"month\"\n  scrollToTime={new Date(1970, 1, 1, 6)}\n  defaultDate={new Date()}\n  localizer={localizer}\n  style={{ height: 'calc(100vh - 350px)' }} // Adjust the height value\n  onSelectEvent={(event) => editEvent(event)}\n  onSelectSlot={(slotInfo) => addNewEventAlert(slotInfo)}\n  eventPropGetter={(event) => eventColors(event)}\n/>\n          <Modal isOpen={open}>\n            <ModalHeader toggle={handleClose}>{update ? 'Update Event' : 'Add Event'}</ModalHeader>\n            <Form onSubmit={update ? updateEvent : submitHandler}>\n              <ModalBody>\n                <h6>Event Title</h6>\n                <Input\n                  id=\"Event Title\"\n                  placeholder=\"Enter Event Title\"\n                  value={title}\n                  onChange={inputChangeHandler}\n                />\n                <br />\n                <h6>Select Event Color</h6>\n                <div className=\"button-group\">\n                  {ColorVariation.map((colorbg) => (\n                    <Button\n                      color={colorbg.value}\n                      key={colorbg.eColor}\n                      size=\"sm\"\n                      onClick={() => selectinputChangeHandler(colorbg.value)}\n                    >\n                      {colorbg.value === color ? (\n                        <i className=\"bi bi-check\" />\n                      ) : (\n                        <i className=\"bi bi-circle\" />\n                      )}\n                    </Button>\n                  ))}\n                </div>\n              </ModalBody>\n              <ModalFooter>\n                {update ? (\n                  <Button\n                    type=\"submit\"\n                    color=\"danger\"\n                    outline\n                    onClick={() => deleteHandler(update)}\n                  >\n                    Delete\n                  </Button>\n                ) : (\n                  ''\n                )}\n                <Button type=\"submit\" color=\"success\" disabled={!title}>\n                  {update ? 'Update' : 'Add'}\n                </Button>\n              </ModalFooter>\n            </Form>\n          </Modal>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default CalendarApp;\n"],"sourceRoot":""}