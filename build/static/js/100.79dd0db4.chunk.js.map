{"version":3,"sources":["components/Message.js","layouts/breadcrumbs/BreadCrumbs.js","components/CreationModification.js","components/ComponentCard.js","components/AccountTable/AccountsMainDetails.js","components/AccountTable/AccountsDetailsButton.js","views/detailTable/AccountDetails.js","constants/creationdatetime.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","CreationModification","details","title","modification_date","creation_date","ComponentCard","children","subtitle","creationModificationDate","AccountsMainDetails","handleInputs","AccountsDetail","md","onChange","value","description","name","invoice_code","moment","invoice_date","format","payment_ref_no","payment_date","job_id","remarks","AccountsDetailsButton","insertExpense","navigate","color","onClick","AccountsDetails","useState","totalAmount","setTotalAmount","groups","setGroup","subgroup","setSubgroup","useNavigate","groupss","useParams","expense_id","date","Date","now","group","sub_group","gst","amount","gst_amount","service_charge","total_amount","payment_status","setAccountsDetail","handleRadioGst","radioVal","totalAmountF","gstValue","serviceCharge","parseFloat","e","target","useEffect","api","get","then","res","data","console","log","defaultValue","headId","post","expense_group_id","catch","selected","map","ele","defaultcheck","check","min","disabled","creationdatetime","insertedDataId","insertId","setTimeout"],"mappings":"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","file":"static/js/100.79dd0db4.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { useLocation, Link } from 'react-router-dom';\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\n\nconst BreadCrumbs = (prop) => {\n  const location = useLocation();\n  const firstUrl = location.pathname.split('/')[1];\n  const secondUrl = location.pathname.split('/')[2];\n  \n  return (\n    <>\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\n      <h4>{prop.heading}</h4>\n      <Breadcrumb>\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\n          Home\n        </BreadcrumbItem>\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadCrumbs;\n","import React from 'react';\nimport { CardTitle, Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CreationModification({ details = null, title }) {\n  CreationModification.propTypes = {\n    details: PropTypes.object,\n    title: PropTypes.string,\n  };\n  return (\n    <>\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\n        <Row>\n          <Col>{title}</Col>\n          {details && (\n            <Col>\n              <Row>\n                <small>Modification Date: {details && details.modification_date}</small>\n              </Row>\n              <Row className=\"d-flex\">\n                <small>Creation Date: {details && details.creation_date}</small>\n              </Row>\n            </Col>\n          )}\n        </Row>\n      </CardTitle>\n    </>\n  );\n}\n","import { Card, CardBody, CardSubtitle } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport CreationModification from './CreationModification';\n\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\n  return (\n    <Card className='shadow-none'>\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\n     \n      <CardBody className=\"p-4\">\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\n        <div>{children}</div>\n      </CardBody>\n    </Card>\n  );\n};\n\nComponentCard.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  subtitle: PropTypes.node,\n  creationModificationDate:PropTypes.any\n};\n\nexport default ComponentCard;\n","import React from 'react';\nimport { Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport default function AccountsMainDetails({ handleInputs, AccountsDetail }) {\n  AccountsMainDetails.propTypes = {\n    handleInputs: PropTypes.object,\n    AccountsDetail: PropTypes.object,\n  };\n  return (\n    <Form>\n      <FormGroup>\n        <Row>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>\n                Description <span className=\"required\"> *</span>\n              </Label>\n              <Input\n                type=\"text\"\n                onChange={handleInputs}\n                value={AccountsDetail && AccountsDetail.description}\n                name=\"description\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>Invoice No </Label>\n              <Input\n                type=\"text\"\n                onChange={handleInputs}\n                value={AccountsDetail && AccountsDetail.invoice_code}\n                name=\"invoice_code\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>invoice Date </Label>\n              <Input\n                type=\"date\"\n                onChange={handleInputs}\n                value={AccountsDetail && moment(AccountsDetail.invoice_date).format('YYYY-MM-DD')}\n                name=\"invoice_date\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>Payment Ref No </Label>\n              <Input\n                type=\"text\"\n                onChange={handleInputs}\n                value={AccountsDetail && AccountsDetail.payment_ref_no}\n                name=\"payment_ref_no\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>Payment Date </Label>\n              <Input\n                type=\"date\"\n                onChange={handleInputs}\n                value={AccountsDetail && moment(AccountsDetail.payment_date).format('YYYY-MM-DD')}\n                name=\"payment_date\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>Job Id </Label>\n              <Input\n                type=\"text\"\n                onChange={handleInputs}\n                value={AccountsDetail && AccountsDetail.job_id}\n                name=\"job_id\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md=\"3\">\n            <FormGroup>\n              <Label>Remarks </Label>\n              <Input\n                type=\"textarea\"\n                onChange={handleInputs}\n                value={AccountsDetail && AccountsDetail.remarks}\n                name=\"remarks\"\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n      </FormGroup>\n    </Form>\n  );\n}\n","import React from 'react';\nimport { Row, Form, FormGroup, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function AccountsDetailsButton({ insertExpense, navigate }) {\n  AccountsDetailsButton.propTypes = {\n    insertExpense: PropTypes.object,\n    navigate: PropTypes.any,\n  };\n  return (\n    <Form>\n      <FormGroup>\n        {/* Button */}\n        <Row>\n          <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\n            <Button\n              color=\"primary\"\n              type=\"button\"\n              className=\"btn mr-2 shadow-none\"\n              onClick={() => {\n                insertExpense();\n              }}\n            >\n              {' '}\n              Submit\n            </Button>\n            <Button\n              onClick={() => {\n                navigate(-1);\n              }}\n              type=\"button\"\n              className=\"btn btn-dark shadow-none\"\n            >\n              Go to List\n            </Button>\n          </div>\n        </Row>\n      </FormGroup>\n    </Form>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport moment from 'moment';\nimport ComponentCard from '../../components/ComponentCard';\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\nimport message from '../../components/Message';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport '../form-editor/editor.scss';\nimport api from '../../constants/api';\nimport AccountsMainDetails from '../../components/AccountTable/AccountsMainDetails';\nimport AccountsDetailsButton from '../../components/AccountTable/AccountsDetailsButton';\nimport creationdatetime from '../../constants/creationdatetime';\n\nconst AccountsDetails = () => {\n  //Const Variables\n  const [totalAmount, setTotalAmount] = useState('');\n  const [groups, setGroup] = useState();\n  const [subgroup, setSubgroup] = useState();\n\n  // Navigation and Parameter Constants\n  const navigate = useNavigate();\n  const { groupss } = useParams();\n\n  // get group\n  const getGroup = () => {\n    api.get('/accounts/getGroupTitle').then((res) => {\n      setGroup(res.data.data);\n      console.log(res.data.data);\n    });\n  };\n  // get subgroup\n  const getSubGroup = (headId) => {\n    api\n      .post('/accounts/getSubGroupTitle', { expense_group_id: headId })\n      .then((res) => {\n        setSubgroup(res.data.data);\n      })\n      .catch(() => {\n        message('ExpenseHead Data Not Found', 'info');\n      });\n  };\n  // insertExpense const\n  const [AccountsDetail, setAccountsDetail] = useState({\n    expense_id: '',\n    date:moment(Date.now()).format('YYYY-MM-DD'),\n    group: '',\n    sub_group: '',\n    gst: '',\n    amount: 0,\n    gst_amount: 0,\n    service_charge: 0,\n    total_amount: '',\n    description: '',\n    invoice_code: '',\n    invoice_date: '',\n    payment_ref_no: '',\n    payment_date: '',\n    job_id: '',\n    payment_status: '',\n    remarks: '',\n  });\n  // calculation connect with radio button\n  const handleRadioGst = (radioVal, totalAmountF, gstValue, serviceCharge) => {\n    /* eslint-disable */\n    if (serviceCharge == '') {\n      serviceCharge = 0;\n    }\n    if (totalAmountF == '') {\n      totalAmountF = 0;\n    }\n    if (gstValue == '') {\n      gstValue = 0;\n    }\n    if (radioVal === '1') {\n      setTotalAmount(\n        parseFloat(totalAmountF) +\n          (parseFloat(gstValue) / 100) * parseFloat(totalAmountF) +\n          parseFloat(serviceCharge),\n      );\n    } else {\n      setTotalAmount(parseFloat(totalAmountF) + parseFloat(serviceCharge));\n    }\n  };\n  /* eslint-disable */\n  const handleInputs = (e) => {\n    setAccountsDetail({ ...AccountsDetail, [e.target.name]: e.target.value });\n  };\n\n  // insertExpense\n const insertExpense = () => {\n    if (\n      AccountsDetail.group !== '' &&\n      AccountsDetail.amount !== '' &&\n      AccountsDetail.description !== ''\n    ){\n      AccountsDetail.date = moment()\n      AccountsDetail.total_amount = totalAmount\n      AccountsDetail.creation_date = creationdatetime\n      api\n      .post('/accounts/insertexpense', AccountsDetail)\n      .then((res) => {\n        const insertedDataId = res.data.data.insertId;\n        console.log(insertedDataId);\n        message('Expense inserted successfully.', 'success');\n        setTimeout(() => {\n          navigate(`/AccountsEdit/${insertedDataId}`);\n        }, 300);\n      })\n      .catch(() => {\n        message('Network connection error.', 'error');\n      });\n      console.log(AccountsDetail)\n    }\n      \n    else {\n      message('Please fill all required fields', 'warning');\n    }\n  };\n\n  useEffect(() => {\n    getGroup();\n  }, [groupss]);\n\n  return (\n    <>\n      <BreadCrumbs heading={AccountsDetail && AccountsDetail.expense_id} />\n      <ToastContainer></ToastContainer>\n      {/* Main Details Insert */}\n      <Form>\n        <FormGroup>\n          <ComponentCard title=\"New Accounts\">\n           \n            <Row>\n              <Col md=\"3\">\n                <FormGroup>\n                  <Label>\n                    Date <span className=\"required\"> *</span>\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    onChange={handleInputs}\n                    defaultValue={moment(Date.now()).format('YYYY-MM-DD')}\n                    name=\"date\"/>\n                </FormGroup>\n              </Col>\n              <Col md=\"3\">\n                <Label>Head <span className=\"required\"> *</span> </Label>\n                <Input\n                  type=\"select\"\n                  name=\"group\"\n                  onChange={(e) => {\n                    getSubGroup(e.target.value);\n                    handleInputs(e);\n                  }}value={groupss}>\n                  <option value=\"\" selected>\n                    Please Select\n                  </option>\n                  {groups &&\n                    groups.map((ele) => {\n                      return <option value={ele.expense_group_id}>{ele.title}</option>;})}\n                </Input>\n              </Col>\n              <Col md=\"3\">\n                <Label>Sub Head </Label>\n                <Input type=\"select\" name=\"sub_group\" onChange={handleInputs} value={groupss}>\n                  <option value=\"\" selected>\n                    Please Select\n                  </option>\n                  {subgroup &&\n                    subgroup.map((ele) => {\n                      return <option value={ele.title}>{ele.title}</option>;\n                    })}\n                </Input>\n              </Col>\n              {/* radio button */}\n              <Col md=\"3\">\n                <Label>GST</Label>\n                <FormGroup defaultcheck>\n                  <Input\n                    name=\"gst\"\n                    value=\"1\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                      handleRadioGst(\n                        e.target.value,\n                        AccountsDetail.amount,\n                        AccountsDetail.gst_amount,\n                        AccountsDetail.service_charge, );}}\n                    type=\"radio\"/>\n                  <Label check>Yes</Label>\n                </FormGroup>\n                <FormGroup check>\n                  <Input\n                    name=\"gst\"\n                    value=\"0\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                      handleRadioGst(\n                        e.target.value,\n                        AccountsDetail.amount,\n                        AccountsDetail.gst_amount,\n                        AccountsDetail.service_charge,\n                      );\n                    }}\n                    type=\"radio\"\n                  />{' '}\n                  <Label check> No </Label>\n                </FormGroup>\n              </Col>\n              <Col md=\"3\">\n                <FormGroup>\n                  <Label>\n                    Amount before GST <span className=\"required\"> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                      handleRadioGst(\n                        AccountsDetail.gst,\n                        e.target.value,\n                        AccountsDetail.gst_amount,\n                        AccountsDetail.service_charge,); }}\n                    name=\"amount\"/>\n                </FormGroup>\n              </Col>\n              <Col md=\"3\">\n                <FormGroup>\n                  <Label>GST Amount </Label>\n                  <Input\n                    type=\"number\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                      handleRadioGst(\n                        AccountsDetail.gst,\n                        AccountsDetail.amount,\n                        e.target.value,\n                        AccountsDetail.service_charge,);}}\n                    name=\"gst_amount\"/>\n                </FormGroup>\n              </Col>\n              <Col md=\"3\">\n                <FormGroup>\n                  <Label>Service Charges</Label>\n                  <Input\n                    type=\"number\"\n                    min={0}\n                    onChange={(e) => {\n                      handleInputs(e);\n                      handleRadioGst(\n                        AccountsDetail.gst,\n                        AccountsDetail.amount,\n                        AccountsDetail.gst_amount,\n                        e.target.value,);}}\n                    value={AccountsDetail && AccountsDetail.service_charge}\n                    name=\"service_charge\"/>\n                </FormGroup>\n              </Col>\n              {/* Total Amount */}\n              <Col md=\"3\">\n                <FormGroup>\n                  <Label>Total Amount </Label>\n                  <Input\n                  disabled\n                    type=\"text\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                    }}\n                    value={totalAmount}\n                    name=\"total_amount\"\n                  />\n                </FormGroup>\n              </Col>\n              <AccountsMainDetails\n                handleInputs={handleInputs}\n                AccountsDetails={AccountsDetails}\n              ></AccountsMainDetails>\n            </Row>\n           <AccountsDetailsButton insertExpense={insertExpense}navigate={navigate}></AccountsDetailsButton>\n          </ComponentCard>\n        </FormGroup>\n      </Form>\n      \n    </>\n  );\n};\nexport default AccountsDetails;\n","import moment from \"moment\"\n\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\nexport default creationdatetime \n"],"sourceRoot":""}