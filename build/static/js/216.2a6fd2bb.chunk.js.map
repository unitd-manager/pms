{"version":3,"sources":["components/Message.js","layouts/logo/AuthLogo.js","views/auth/LoginFormik.js","assets/images/logos/logo.png"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","AuthLogo","to","className","src","MainLogo","alt","LoginFormik","setToken","setUser","usePermify","UserLogin","value","loginApi","post","then","res","user","data","status","alert","user_group_id","apiData","permissionArray","forEach","element","edit","push","section_title","detail","duplicate","export","import","list","new","print","publish","remove","localStorage","setItem","JSON","stringify","id","roles","permissions","window","location","reload","catch","err","console","log","validationSchema","Yup","shape","email","required","password","min","fluid","lg","initialValues","onSubmit","values","render","errors","touched","htmlFor","name","component","inline","check","color"],"mappings":"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","file":"static/js/216.2a6fd2bb.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","// import { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport  MainLogo from '../../assets/images/logos/logo.png';\n\nconst AuthLogo = () => {\n  return (\n    <Link to=\"/\" className=\"d-flex align-items-center gap-2\">\n    <img src={MainLogo} alt=\"Logo\" className='w-100' />\n    </Link>\n  );\n};\n\nexport default AuthLogo;\n","import React from 'react';\n\nimport { Button, Label, FormGroup, Container, Row, Col, Card, CardBody, Input } from 'reactstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport PropTypes from 'prop-types';\nimport { usePermify } from '@permify/react-role';\nimport AuthLogo from '../../layouts/logo/AuthLogo';\n// import { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\n// import { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\n// import {Dashboards} from '../../components/dashboard/classicDashboard';\nimport loginApi from '../../constants/api';\nimport message from '../../components/Message';\n\n\nconst LoginFormik = ({ setToken }) => {\n  const { setUser } = usePermify();\n  const getPermissions = (user) => {\n    loginApi\n      .post('/usergroup/getusergroupForLoginUser', { user_group_id: user.user_group_id })\n      .then((res) => {\n        const apiData = res.data.data;\n        const permissionArray = [];\n        apiData.forEach((element) => {\n          if (element.edit) permissionArray.push(`${element.section_title}-edit`);\n          if (element.detail) permissionArray.push(`${element.section_title}-detail`);\n          if (element.duplicate) permissionArray.push(`${element.section_title}-duplicate`);\n          if (element.export) permissionArray.push(`${element.section_title}-export`);\n          if (element.import) permissionArray.push(`${element.section_title}-import`);\n          if (element.list) permissionArray.push(`${element.section_title}-list`);\n          if (element.new) permissionArray.push(`${element.section_title}-new`);\n          if (element.print) permissionArray.push(`${element.section_title}-print`);\n          if (element.publish) permissionArray.push(`${element.section_title}-publish`);\n          if (element.remove) permissionArray.push(`${element.section_title}-remove`);\n        });\n        localStorage.setItem('user', JSON.stringify(user));\n        setToken('123');\n        setUser({\n          id: '1',\n          roles: ['admin'],\n          permissions: permissionArray,\n        });\n        window.location.reload()\n      })\n      .catch(() => {\n        message('Network connection error.', 'error');\n      });\n  };\n\n  const UserLogin = (value) => {\n    loginApi\n      .post('/api/login', value)\n      .then((res) => {\n        if (res && res.data.status === '400') {\n          alert('Invalid Username or Password');\n        } else {\n          getPermissions(res.data.data);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const initialValues = {\n    email: 'admin@gmail.com',\n    password: 'admin@123',\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string()\n      .min(6, 'Password must be at least 6 characters')\n      .required('Password is required'),\n  });\n\n  return (\n    <div className=\"loginBox\">\n      {/* <LeftBg className=\"position-absolute left bottom-0\" />\n      <RightBg className=\"position-absolute end-0 top\" /> */}\n      <Container fluid className=\"h-100\">\n        <Row className=\"justify-content-center align-items-center h-100\">\n          <Col lg=\"12\" className=\"loginContainer\">\n            <AuthLogo />\n            <Card>\n              <CardBody className=\"p-4 m-1\">\n                {/* <h5 className=\"mb-0\">Login</h5>\n                <small className=\"pb-4 d-block\">\n                  Do not have an account? <Link to=\"/auth/registerformik\">Sign Up</Link>\n                </small> */}\n                <Formik\n                  initialValues={initialValues}\n                  validationSchema={validationSchema}\n                  onSubmit={(values) => {\n                    UserLogin(values);\n                  }}\n                  render={({ errors, touched }) => (\n                    <Form>\n                      <FormGroup>\n                        <Label htmlFor=\"email\">Email Address</Label>\n                        <Field\n                          name=\"email\"\n                          type=\"text\"\n                          className={`form-control${\n                            errors.email && touched.email ? ' is-invalid' : ''\n                          }`}\n                        />\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                      </FormGroup>\n                      <FormGroup>\n                        <Label htmlFor=\"password\">Password</Label>\n                        <Field\n                          name=\"password\"\n                          type=\"password\"\n                          className={`form-control${\n                            errors.password && touched.password ? ' is-invalid' : ''\n                          }`}\n                        />\n                        <ErrorMessage\n                          name=\"password\"\n                          component=\"div\"\n                          className=\"invalid-feedback\"\n                        />\n                      </FormGroup>\n                      <FormGroup className=\"form-check d-flex\" inline>\n                        <Label check>\n                          <Input type=\"checkbox\" />\n                          Remember me\n                        </Label>\n                        {/* <Link className=\"ms-auto text-decoration-none\" to=\"/auth/forgotPwd\">\n                          <small>Forgot Pwd?</small>\n                        </Link> */}\n                      </FormGroup>\n                      <FormGroup>\n                        <Button type=\"submit\" color=\"primary\" className=\"me-2\">\n                          Login\n                        </Button>\n                      </FormGroup>\n                    </Form>\n                  )}\n                />\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nLoginFormik.propTypes = {\n  setToken: PropTypes.func.isRequired,\n};\n\nexport default LoginFormik;\n","export default __webpack_public_path__ + \"static/media/logo.b8526821.png\";"],"sourceRoot":""}