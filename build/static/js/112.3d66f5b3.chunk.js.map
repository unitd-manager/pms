{"version":3,"sources":["components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/dashboard/StatsPms.js","components/dashboard/StatsPmsDonut.js","components/dashboard/PriorityStats.js","components/dashboard/MilestoneCompletedChart.js","components/dashboard/TenderSummary.js","views/dashboards/Cubosale.js","components/LottieComponent.js","components/CommonTable.js","components/dashboard/ActualHour.js","components/dashboard/AverageIssues.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","tag","className","modification_date","creation_date","ComponentCard","children","subtitle","creationModificationDate","Stats","useState","employees","setEmployees","employeeStats","setEmployeeStats","data","setData","projects","setProjects","selectedProject","setSelectedProject","selectedEmployeeId","setSelectedEmployeeId","getProjectId","projectId","api","post","employee_id","then","res","catch","useEffect","get","project_id","selectedEmpProject","seriesPie","completed_tasks","pending_tasks","in_progress_tasks","on_hold_tasks","md","for","name","onChange","e","selectedId","target","value","map","element","first_name","selectedProjectId","project","ele","project_task_id","options","chart","id","fontFamily","dataLabels","enabled","plotOptions","pie","size","legend","show","width","labels","colors","tooltip","fillSeriesColor","series","height","StatsPmsDue","console","log","seriesDonut","with_due","due","over_due","employeeId","getStats","task_titles","donut","PriorityStats","datas","setDatas","optionsbar","xaxis","categories","style","yaxis","tickAmount","min","max","bar","borderRadius","horizontal","seriesbar","task","index","task_priorities","length","MilestoneCompleted","taskTitles","setTaskTitles","actualHourData","setActualHourData","estimatedHourData","setEstimatedHourData","optionscolumn","endingShape","columnWidth","stroke","cssClass","text","color","fill","opacity","y","formatter","val","grid","borderColor","seriescolumn","response","milestoneData","item","milestone_title","actualDate","Date","actual_completed_date","toLocaleDateString","estimatedDate","to_date","HourData","TenderSummary","projectTask","setProjectTask","CommonTable","selector","grow","wrap","button","sortable","cell","project_title","task_title","estimated_hours","description","Classic","lg","StatsPmsDonut","ActualHour","AverageIssues","LottieComponent","defaultOptions","loop","autoplay","renderer","animationData","rendererSettings","preserveAspectRatio","props","justifyContent","xl","sm","Button","loading","additionalClasses","striped","responsive","borderless","hourData","titles","actualHours","total_actual_hours","estimatedHours","monthNames","month","num_issues"],"mappings":"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","file":"static/js/112.3d66f5b3.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import React from 'react';\nimport { CardTitle, Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CreationModification({ details = null, title }) {\n  CreationModification.propTypes = {\n    details: PropTypes.object,\n    title: PropTypes.string,\n  };\n  return (\n    <>\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\n        <Row>\n          <Col>{title}</Col>\n          {details && (\n            <Col>\n              <Row>\n                <small>Modification Date: {details && details.modification_date}</small>\n              </Row>\n              <Row className=\"d-flex\">\n                <small>Creation Date: {details && details.creation_date}</small>\n              </Row>\n            </Col>\n          )}\n        </Row>\n      </CardTitle>\n    </>\n  );\n}\n","import { Card, CardBody, CardSubtitle } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport CreationModification from './CreationModification';\n\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\n  return (\n    <Card className='shadow-none'>\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\n     \n      <CardBody className=\"p-4\">\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\n        <div>{children}</div>\n      </CardBody>\n    </Card>\n  );\n};\n\nComponentCard.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  subtitle: PropTypes.node,\n  creationModificationDate:PropTypes.any\n};\n\nexport default ComponentCard;\n","import React, { useState, useEffect } from 'react';\nimport { Form, FormGroup, Label, Input, Row, Col, CardBody } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport api from '../../constants/api';\nimport ComponentCard from '../ComponentCard';\nimport message from '../Message';\n\nconst Stats = () => {\n  const [employees, setEmployees] = useState([]);\n  const [employeeStats, setEmployeeStats] = useState([]);\n  const [data, setData] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n\n  const getJobs = () => {\n    api.get('jobinformation/getEmployee')\n    .then((res) => {\n      setEmployees(res.data.data);\n      })\n      .catch(() => {});\n  };\n\n  const getProjectId = (projectId) => {\n    api\n      .post('/projecttask/getProjectTitleId', { employee_id: projectId })\n      .then((res) => {\n        setProjects(res.data.data);\n      })\n      .catch(() => {\n        message('Task not found', 'info');\n      });\n  };\n  // Get the list of employees from the API\n  useEffect(() => {\n   getJobs();     \n  }, []);\n\n  // Get the employee and project-specific statistics based on the selected employee and project\n  useEffect(() => {\n    if (selectedProject) {\n      api.post('/stats/getStatsEmployeeId', { employee_id: selectedEmployeeId, project_id: selectedProject })\n        .then((res) => {\n          setData(res.data.data);\n        })\n        .catch(() => {});\n      \n      api.post('/stats/getStatsId', { employee_id: selectedEmployeeId, project_id: selectedProject })\n        .then((res) => {\n          setEmployeeStats(res.data.data);\n        })\n        .catch(() => {});\n    }\n  }, [selectedProject, selectedEmployeeId]);\n\n  useEffect(() => { \n    if (data && data.employee_id) {\n      const selectedEmpProject = data.employee_id;\n      getProjectId(selectedEmpProject);\n    }\n  }, [data && data.employee_id]);\n\n\n  const optionsPie = {\n    chart: {\n      id: 'pie-chart',\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    dataLabels: {\n      enabled: true,\n    },\n    plotOptions: {\n      pie: {\n        pie: {\n          size: '70px',\n        },\n      },\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      width: '50px',\n      fontFamily: \"'Montserrat', sans-serif\",\n      labels: {\n        colors: '#8898aa',\n      },\n    },\n    colors: [\n      'rgb(30, 136, 229)',\n      'rgb(38, 198, 218)',\n      'rgb(17, 249, 232)',\n      'rgb(116, 90, 242)',\n      '#ef5350',\n    ],\n    tooltip: {\n      fillSeriesColor: false,\n      theme: 'dark',\n    },\n    labels: [\n      'Completed Tasks',\n      'Pending Tasks',\n      'In Progress Tasks',\n      'On Hold Tasks',\n    ],\n  };\n\n  const seriesPie = employeeStats\n  ? [\n      employeeStats[0]?.completed_tasks || 0,\n      employeeStats[0]?.pending_tasks || 0,\n      employeeStats[0]?.in_progress_tasks || 0,\n      employeeStats[0]?.on_hold_tasks || 0,\n    ]\n  : [];\n    \n  return (\n    <Row>\n      <Col md=\"6\">\n      <ComponentCard title=\"Employee Statistics\">\n          <Form>\n            <FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedId = e.target.value;\n                  setSelectedEmployeeId(selectedId);\n                  getProjectId(selectedId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.employee_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"projectSelect\">Select Project</Label>\n              <Input\n                type=\"select\"\n                name=\"project_id\"\n                onChange={(e) => {\n                  const selectedProjectId = e.target.value;\n                  setSelectedProject(selectedProjectId);\n                }}\n              >\n                <option value=\"\">Select Project</option>\n                {projects &&\n                  projects.map((project) => (\n                    <option key={project.employee_id} value={project.project_id}>\n                      {project.title}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            <CardBody>\n              {data &&\n                data.map((ele) => (\n                  <Row key={ele.project_task_id}>\n                    <Col md=\"6\">\n        <Row>\n                        <Label>\n                          <b>Project:</b> {ele.title}\n                        </Label>\n                      </Row>\n                    </Col>\n                  </Row>\n                ))}\n            </CardBody>\n          </Form>\n          {employeeStats && (\n          <Chart options={optionsPie} series={seriesPie} type=\"pie\" height=\"300\" />\n        )}\n        </ComponentCard>\n      </Col>\n   \n    </Row>\n  );\n};\n\nexport default Stats;\n","import React, { useState, useEffect } from 'react';\nimport { Form, FormGroup, Label, Input, Row, Col, CardBody } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport api from '../../constants/api';\nimport ComponentCard from '../ComponentCard';\n\nconst StatsPmsDue = () => {\n  const [employees, setEmployees] = useState([]);\n  const [employeeStats, setEmployeeStats] = useState([]);\n  const [data, setData] = useState([]);\n\n  // Get the list of employees from the API\n  const getEmployeeStats = (employeeId) => {\n    api.post('/stats/getDueStatsEmployeeId', { employee_id: employeeId })\n      .then((res) => {\n        setData(res.data.data);\n      })\n      .catch(() => {});\n  };\n\n  // Get the employee statistics based on the selected employee\n  const getStats = (employeeId) => {\n    api.post('/stats/getDuechartStats', { employee_id: employeeId })\n      .then((res) => {\n        setEmployeeStats(res.data.data);\n      })\n      .catch(() => {});\n  };\n\n\n  useEffect(() => {\n    api.get('jobinformation/getEmployee')\n      .then((res) => {\n        setEmployees(res.data.data);\n      })\n      .catch((error) => {\n        console.log('Error fetching employees:', error);\n      });\n  }, []);\n\n  const optionsdoughnut = {\n    chart: {\n      id: 'donut-chart',\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    dataLabels: {\n      enabled: true,\n    },\n    plotOptions: {\n      pie: {\n        donut: {\n          size: '70px',\n        },\n      },\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      width: '50px',\n      fontFamily: \"'Montserrat', sans-serif\",\n      labels: {\n        colors: '#8898aa',\n      },\n    },\n    colors: [\n      'rgb(30, 136, 229)',\n      'rgb(38, 198, 218)',\n      'rgb(116, 90, 242)',\n      '#ef5350',\n    ],\n    tooltip: {\n      fillSeriesColor: false,\n      theme: 'dark',\n    },\n    labels: [\n      'With Due',\n      'Due',\n      'Over Due',\n    ],\n  };\n\n  const seriesDonut = employeeStats\n  ? [\n      employeeStats[0]?.with_due || 0,\n      employeeStats[0]?.due || 0,\n      employeeStats[0]?.over_due || 0,\n    ]\n  : [];\n    \n  return (\n    <Row>\n      <Col md=\"6\">\n        <ComponentCard title=\"Employee Due Statistics\">\n          <Form>\n            <FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedEmployeeId = e.target.value;\n                  getEmployeeStats(selectedEmployeeId);\n                  getStats(selectedEmployeeId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.employee_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            <CardBody>\n              {data &&\n                data.map((ele) => (\n                  <Row key={ele.employee_id}>\n                    <Col md=\"6\">\n                      <Row>\n                        <Label>\n                          <b>Title:</b> {ele.task_titles}\n                        </Label>\n                      </Row>\n                      <Row>\n                        <Label>\n                          <b>Project:</b> {ele.title}\n                        </Label>\n                      </Row>\n                    </Col>\n                  </Row>\n                ))}\n            </CardBody>\n          </Form>\n          {employeeStats && (\n          <Chart options={optionsdoughnut} series={seriesDonut} type=\"donut\" height=\"300\" />\n        )}\n        </ComponentCard>\n      </Col>\n   \n    </Row>\n  );\n};\n\nexport default StatsPmsDue;\n","import React, { useState, useEffect } from 'react';\nimport { Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport api from '../../constants/api';\nimport ComponentCard from '../ComponentCard';\n\nconst PriorityStats = () => {\n  const [employees, setEmployees] = useState([]);\n  const [employeeStats, setEmployeeStats] = useState([]);\n  const [datas, setDatas] = useState([]);\n\n  // Get the employee statistics based on the selected employee\n  const getStats = (employeeId) => {\n    api.post('/stats/getPriorityTasks', { employee_id: employeeId })\n      .then((res) => {\n        const { data } = res.data;\n        setDatas(data.task_titles);\n        setEmployeeStats(data.task_priorities);\n      })\n      .catch(() => {});\n  };\n\n  useEffect(() => {\n    api.get('jobinformation/getEmployee')\n      .then((res) => {\n        setEmployees(res.data.data);\n      })\n      .catch((error) => {\n        console.log('Error fetching employees:', error);\n      });\n  }, []);\n\n  const optionsbar = {\n    chart: {\n      id: 'bar-chart',\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    xaxis: {\n      categories: datas, // Priority levels as X-axis labels\n      labels: {\n        style: {\n          colors: '#8898aa',\n        },\n      },\n    },\n    yaxis: {\n      categories: ['1', '2', '3', '4', '5'], // Task titles as Y-axis labels\n      labels: {\n        style: {\n          colors: '#8898aa',\n        },\n      },\n      tickAmount: 5, // Number of ticks on the Y-axis, corresponding to the number of categories\n      min: 0, // Set the minimum value of the Y-axis to match the first category\n      max: 5, // Set the maximum value of the Y-axis to match the last category\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        horizontal: true,\n      }\n    },\n    colors: [\n      'rgb(30, 136, 229)',\n      'rgb(38, 198, 218)',\n      'rgb(236, 239, 241)',\n      'rgb(116, 90, 242)',\n      '#ef5350',\n    ],\n    tooltip: {\n      fillSeriesColor: false,\n      theme: 'dark',\n    },\n  };\n\n  // Create a separate data series for each task\n  const seriesbar = datas.map((task, index) => ({\n    name: task, // Task title as the series name\n    data: employeeStats[index], // Priority levels as the data points\n  }));\n  \n  return (\n    <Row>\n      <Col md=\"6\">\n        <ComponentCard title=\"Employee Priorities\">\n          <Form>\n            <FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedEmployeeId = e.target.value;\n                  getStats(selectedEmployeeId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.employee_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n          \n          </Form>\n          {employeeStats.length > 0 && (\n            <Chart options={optionsbar} series={seriesbar} type=\"bar\" height=\"280\" />\n          )}\n        </ComponentCard>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PriorityStats;","import React, { useEffect, useState } from 'react';\nimport { Col, FormGroup, Label, Input } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport ComponentCard from '../ComponentCard';\nimport api from '../../constants/api';\n\nconst MilestoneCompleted = () => {\n  const [taskTitles, setTaskTitles] = useState([]);\n  const [actualHourData, setActualHourData] = useState([]);\n  const [estimatedHourData, setEstimatedHourData] = useState([]);\n  const [projects, setProjects] = useState([]);\n\n  const HourData = (selectedProjectId) => {\n    // Make API call to retrieve the data\n    api.post('/stats/getMilestoneCompletedStats', { project_id: selectedProjectId })\n      .then((response) => {\n        // Check if the response data is not empty\n        if (response.data && response.data.data && response.data.data.length > 0) {\n          // Assuming the response data is an array of objects with keys: milestone_title, actual_completed_date, and to_date\n          const hourData = response.data.data;\n          const milestoneData = hourData.map((item) => ({\n            title: item.milestone_title,\n            actualDate: new Date(item.actual_completed_date).toLocaleDateString(), // Convert to local date string\n            estimatedDate: new Date(item.to_date).toLocaleDateString(), // Convert to local date string\n          }));\n\n          setTaskTitles(milestoneData.map((item) => item.title));\n          setActualHourData(milestoneData.map((item) => item.actualDate));\n          setEstimatedHourData(milestoneData.map((item) => item.estimatedDate));\n        } else {\n          // If the response data is empty, reset the state to show an empty chart or display a message\n          setTaskTitles([]);\n          setActualHourData([]);\n          setEstimatedHourData([]);\n        }\n      })\n      .catch((error) => {\n        console.log('Error fetching data:', error);\n      });\n  };\n\n  useEffect(() => {\n    api.get('projecttask/getProjectTitle')\n      .then((res) => {\n        setProjects(res.data.data);\n      })\n      .catch((error) => {\n        console.log('Error fetching projects:', error);\n      });\n  }, []);\n\n  const optionscolumn = {\n    colors: ['#745af2', '#263238'],\n    chart: {\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        endingShape: 'rounded',\n        columnWidth: '55%',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent'],\n    },\n    xaxis: {\n      categories: taskTitles,\n      labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Date',\n        color: '#8898aa',\n      },\n      labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    fill: {\n      opacity: 1,\n    },\n    tooltip: {\n      theme: 'dark',\n      y: {\n      \n        formatter(val) {\n          return val; // Since the date is already in the format you want, simply return it as is\n        },\n      },\n    },\n    grid: {\n      borderColor: 'rgba(0,0,0,0.1)',\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      width: '50px',\n      fontFamily: \"'Montserrat', sans-serif\",\n      labels: {\n        colors: '#8898aa',\n      },\n    },\n  };\n  \n\n  const seriescolumn = [\n    {\n      name: 'Actual Completed Date',\n      data: actualHourData,\n    },\n    {\n      name: 'Estimated Date',\n      data: estimatedHourData,\n    },\n  ];\n\n  return (\n    <Col md=\"6\">\n      <ComponentCard title=\"Milestone Statistics\">\n        <FormGroup>\n          <Label for=\"projectSelect\">Select Project</Label>\n          <Input\n            type=\"select\"\n            name=\"project_id\"\n            onChange={(e) => {\n              const selectedProjectId = e.target.value;\n              HourData(selectedProjectId);\n            }}\n          >\n            <option value=\"\">Select Project</option>\n            {projects &&\n              projects.map((element) => (\n                <option key={element.project_id} value={element.project_id}>\n                  {element.title}\n                </option>\n              ))}\n          </Input>\n        </FormGroup>\n\n        <ComponentCard title=\"Column Chart\">\n          <Chart options={optionscolumn} series={seriescolumn} type=\"bar\" height=\"280\" />\n        </ComponentCard>\n      </ComponentCard>\n    </Col>\n  );\n};\n\nexport default MilestoneCompleted;\n","import React, { useEffect, useState } from 'react';\nimport CommonTable from \"../CommonTable\";\nimport api from \"../../constants/api\";\n\nconst TenderSummary = () => {\n\n  const [projectTask, setProjectTask] = useState();\n\n  useEffect(() => {\n    api.get('/projecttask/getAllCurrentTask').then((res) => {\n      console.log(\"projecttask\",res.data.data)\n      setProjectTask(res.data.data);\n    });\n  }, []);\n\n  const columns = [\n    {\n      name: \"Name\",\n      selector: \"first_name\",\n      grow: 0,\n      wrap: true,\n    },\n    {\n      name: \"Project\",\n      selector: \"project_title\",\n      grow: 0,\n      width: \"auto\",\n      button: true,\n      sortable: false,\n    },\n    {\n      name: \"Task\",\n      selector: \"task_title\",\n      grow: 0,\n      width: \"auto\",\n      wrap: true,\n    },\n    {\n      name: \"Hrs\",\n      selector: \"estimated_hours\",\n      sortable: true,\n      grow: 0,\n      wrap: true,\n    },\n    {\n      name: \"Description\",\n      selector: \"description\",\n      sortable: true,\n      grow: 2,\n      wrap: true,\n    },\n    {\n      name: \"Total Hrs\",\n      selector: \"\",\n      sortable: true,\n      grow: 0,\n      wrap: true,\n    },\n  ];\n\n  return (\n    <>\n      <CommonTable title=\"Employee Task List\">\n          <thead>\n            <tr>\n              {columns.map((cell) => {\n                return <td key={cell.name}>{cell.name}</td>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n          {projectTask &&\n                projectTask.map((element) => {\n                  return (\n                    <tr key={element.employee_id}>\n                      <td>{element.first_name}</td>\n                      <td>{element.project_title}</td>\n                      <td>{element.task_title}</td>\n                      <td>{element.estimated_hours}</td>\n                      <td>{element.description}</td>\n                      <td></td>\n                    </tr>\n                  );\n                })}\n          </tbody>\n      </CommonTable>\n    </>\n  );\n}\n\nexport default TenderSummary;","import { Row, Col } from 'reactstrap';\nimport Stats from '../../components/dashboard/StatsPms';\n\nimport StatsPmsDonut from '../../components/dashboard/StatsPmsDonut';\nimport ActualHour from '../../components/dashboard/ActualHour';\nimport PriorityStats from '../../components/dashboard/PriorityStats';\nimport MilestoneCompleted from '../../components/dashboard/MilestoneCompletedChart';\nimport AverageIssues from '../../components/dashboard/AverageIssues';\n\n\n// import SalesOverview from '../../components/dashboard/classicDashboard/ProjectOverview';\n// import TenderSummaryCard from '../../components/dashboard/TenderSummaryCard';\n// import ProjectSummaryChart from '../../components/dashboard/ProjectSummaryChart';\nimport TaskSummary from '../../components/dashboard/TenderSummary';\n// import InvoiceSummary from '../../components/dashboard/InvoiceSummary';\n// import InvoiceSummaryChart from '../../components/dashboard/InvoiceSummaryChart';\n// import EmployeeSummary from '../../components/dashboard/ecommerceDashboard/EmployeeSummary';\n// import PasspotExpirySummary from '../../components/dashboard/PasspotExpirySummary';\n// import WorkpermitExpirySummary from '../../components/dashboard/WorkpermitExpirySummary';\n\nconst Classic = () => {\n  return (\n    <>\n      {/*********************Sales Overview ************************/}\n      <Row>\n        <Col lg=\"12\">\n          <TaskSummary />\n          {/* <TenderSummaryCard />\n          <ProjectSummaryChart/>\n          <InvoiceSummary/>\n          <InvoiceSummaryChart/>\n          <EmployeeSummary/>\n          <PasspotExpirySummary />\n          <WorkpermitExpirySummary/> */}\n          {/* <SalesOverview /> */}\n          <Stats/>\n          <StatsPmsDonut></StatsPmsDonut>\n          <ActualHour/>\n          <MilestoneCompleted/>\n          <AverageIssues/>\n        </Col>\n      </Row>\n      <Row>\n        <Col lg=\"12\">\n          {/* <TenderSummaryCard />\n          <ProjectSummaryChart/>\n          <TenderSummary />\n          <InvoiceSummary/>\n          <InvoiceSummaryChart/>\n          <EmployeeSummary/>\n          <PasspotExpirySummary />\n          <WorkpermitExpirySummary/> */}\n          {/* <SalesOverview /> */}\n          <PriorityStats/>\n          <ActualHour/>\n          <AverageIssues/>\n        </Col>\n      </Row>\n      {/*********************Email & Visitor ************************/}\n      {/* <Row>\n        <Col lg=\"8\" sm=\"12\">\n          <EmailCampaign />\n        </Col>\n        <Col lg=\"4\" sm=\"12\">\n          <ActiveVisitors />\n        </Col>\n      </Row>\n      \n      <Stats />\n     \n      <Row>\n        <Col lg=\"12\">\n          <ProjectTable />\n        </Col>\n      </Row>\n     \n      <Row>\n        <Col lg=\"6\" sm=\"12\">\n          <RecentComments />\n        </Col>\n        <Col lg=\"6\" sm=\"12\">\n          <Chat />\n        </Col>\n      </Row> */}\n    </>\n  );\n};\n\nexport default Classic;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from './pencil.json';\n/* eslint-disable */\nconst LottieComponent = () => {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    renderer: 'svg',\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice'\n    },\n  };\n\n  return (\n    <div>\n      <Lottie options={defaultOptions} height={100} width={100} />\n    </div>\n  );\n};\n\nexport default LottieComponent;\n","\nimport { Card, CardBody, CardTitle, CardSubtitle, Table, Col, Row } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport LottieComponent from './LottieComponent'\n\nconst CommonTable = (props) => {\n    CommonTable.propTypes = {\n        children: PropTypes.node,\n        title: PropTypes.any,\n        subtitle: PropTypes.any,\n        Button:PropTypes.node,\n        additionalClasses:PropTypes.string,\n        loading:PropTypes.bool\n      };\n  return (\n     <div>\n    <Card>\n      <CardBody>\n        <Row className=\"mb-2 title_border\">\n          <Col>\n            <CardTitle tag=\"h5\">{props.title}</CardTitle>\n            <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n              {props.subtitle}\n            </CardSubtitle>\n          </Col>\n          <Col className='d-flex' style={{justifyContent:'flex-end'}} xl={3} sm={12}>\n              {props.Button}\n          </Col>\n        </Row>\n        {props.loading ? <LottieComponent /> : <Table id=\"example\" className={`no-wrap mt-3 align-middle example ${props.additionalClasses}`} striped responsive borderless>\n          {props.children}\n        </Table>}\n        \n      </CardBody>\n    </Card>\n  </div>\n    \n  );\n};\n\nexport default CommonTable;\n","import React, { useEffect, useState } from 'react';\nimport { Col, FormGroup, Label, Input } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport ComponentCard from '../ComponentCard';\nimport api from '../../constants/api';\n\nconst ActualHour = () => {\n  const [taskTitles, setTaskTitles] = useState([]);\n  const [actualHourData, setActualHourData] = useState([]);\n  const [estimatedHourData, setEstimatedHourData] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n\n  const HourData = (selectedEmployeeId) => {\n    // Make API call to retrieve the data\n    api\n    .post('/stats/getActualHourStats', { employee_id: selectedEmployeeId })\n    .then((response) => {\n      // Check if the response data is not empty\n      if (response.data && response.data.data && response.data.data.length > 0) {\n        // Assuming the response data is an array of objects with keys: task_title, total_actual_hours, and estimated_hours\n        const hourData = response.data.data;\n        const titles = hourData.map((item) => item.task_title);\n        const actualHours = hourData.map((item) => item.total_actual_hours);\n        const estimatedHours = hourData.map((item) => item.estimated_hours);\n\n        setTaskTitles(titles);\n        setActualHourData(actualHours);\n        setEstimatedHourData(estimatedHours);\n      } else {\n        // If the response data is empty, reset the state to show an empty chart or display a message\n        setTaskTitles([]);\n        setActualHourData([]);\n        setEstimatedHourData([]);\n      }\n    })\n  };\n\n  useEffect(() => {\n    api.get('/jobinformation/getEmployee')\n      .then((res) => {\n        setEmployees(res.data.data);\n      })\n      .catch((error) => {\n        console.log('Error fetching employees:', error);\n      });\n  }, []);\n\n\n  const optionscolumn = {\n    colors: ['#745af2', '#263238'],\n    chart: {\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        endingShape: 'rounded',\n        columnWidth: '55%',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent'],\n    },\n    xaxis: {\n      categories: taskTitles,\n      labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Hours',\n        color: '#8898aa',\n      },\n      labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    fill: {\n      opacity: 1,\n    },\n    tooltip: {\n      theme: 'dark',\n      y: {\n        formatter(val) {\n          return `${val} hours`;\n        },\n      },\n    },\n    grid: {\n      borderColor: 'rgba(0,0,0,0.1)',\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      width: '50px',\n      fontFamily: \"'Montserrat', sans-serif\",\n      labels: {\n        colors: '#8898aa',\n      },\n    },\n  };\n  \n\n  const seriescolumn = [\n    {\n      name: 'Actual Hour',\n      data: actualHourData,\n    },\n    {\n      name: 'Estimated Hour',\n      data: estimatedHourData,\n    },\n  \n   \n  ];\n\n  return (\n    <Col md=\"6\">\n      <FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedEmployeeId = e.target.value;\n                  HourData(selectedEmployeeId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.employee_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            \n      <ComponentCard title=\"Column Chart\">\n        <Chart options={optionscolumn} series={seriescolumn} type=\"bar\" height=\"280\" />\n      </ComponentCard>\n    </Col>\n  );\n};\n\nexport default ActualHour;\n","import React, { useEffect, useState } from 'react';\nimport { Col, FormGroup, Label, Input } from 'reactstrap';\nimport Chart from 'react-apexcharts';\nimport ComponentCard from '../ComponentCard';\nimport api from '../../constants/api';\n\nconst AverageIssues = () => {\n  //const [taskTitles, setTaskTitles] = useState([]);\n  const [actualHourData, setActualHourData] = useState([]);\n  const [estimatedHourData, setEstimatedHourData] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n\n  const HourData = (selectedEmployeeId) => {\n    // Make API call to retrieve the data\n    api\n    .post('/stats/getActualAveragestats', { employee_id: selectedEmployeeId })\n    .then((response) => { \n      // Check if the response data is not empty\n      if (response.data && response.data.data && response.data.data.length > 0) {\n        \n      // Assuming the response data is an array of objects with keys: task_title, total_actual_hours, and estimated_hours\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const hourData = response.data.data;\n        //const titles = hourData.map((item) => item.task_title);\n        const actualHours = hourData.map((item) => monthNames[item.month - 1]); \n        const estimatedHours = hourData.map((item) => item.num_issues);\n\n       // setTaskTitles(titles);\n       setActualHourData(actualHours);\n        setEstimatedHourData(estimatedHours);\n      } else {\n        // If the response data is empty, reset the state to show an empty chart or display a message\n        //setTaskTitles([]);\n        setActualHourData([]);\n        setEstimatedHourData([]);\n      }\n    })\n  };\n\n  useEffect(() => {\n    api.get('/jobinformation/getEmployee')\n      .then((res) => {\n        setEmployees(res.data.data);\n      })\n      .catch((error) => {\n        console.log('Error fetching employees:', error);\n      });\n  }, []);\n\n  const optionscolumn = {\n    colors: ['#745af2', '#263238'],\n    chart: {\n      fontFamily: \"'Rubik', sans-serif\",\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        endingShape: 'rounded',\n        columnWidth: '55%',\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent'],\n    },\n    xaxis: {\n      categories: actualHourData,  \n        labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Issues',\n        color: '#8898aa',\n      },\n     \n      labels: {\n        style: {\n          cssClass: 'grey--text lighten-2--text fill-color',\n        },\n      },\n    },\n    fill: {\n      opacity: 1,\n    },\n    tooltip: {\n      theme: 'dark',\n      y: {\n        formatter(val) {\n          return `${val} issues`;\n        },\n      },\n    },\n    grid: {\n      borderColor: 'rgba(0,0,0,0.1)',\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      width: '50px',\n      fontFamily: \"'Montserrat', sans-serif\",\n      labels: {\n        colors: '#8898aa',\n      },\n    },\n  };\n  \n\n  const seriescolumn = [\n    {\n      name: 'Issues',\n      data: estimatedHourData\n    },\n  ];\n  \n\n\n  return (\n    <Col md=\"6\">\n      <FormGroup>\n              <Label for=\"employeeSelect\">Select Employee</Label>\n              <Input\n                type=\"select\"\n                name=\"employee_id\"\n                onChange={(e) => {\n                  const selectedEmployeeId = e.target.value;\n                  HourData(selectedEmployeeId);\n                }}\n              >\n                <option value=\"\">Select Employee</option>\n                {employees &&\n                  employees.map((element) => (\n                    <option key={element.employee_id} value={element.employee_id}>\n                      {element.first_name}\n                    </option>\n                  ))}\n              </Input>\n            </FormGroup>\n            \n      <ComponentCard title=\"Column Chart\">\n        <Chart options={optionscolumn} series={seriescolumn} type=\"bar\" height=\"280\" />\n      </ComponentCard>\n    </Col>\n  );\n};\n\nexport default AverageIssues;\n"],"sourceRoot":""}