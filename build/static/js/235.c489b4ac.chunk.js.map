{"version":3,"sources":["components/FinanceTable/CreateNote.js"],"names":["CreateNote","editCreateNote","setEditCreateNote","useState","createNoteAmount","setCreateNoteAmount","createInvoiceNote","setCreateInvoiceNote","id","useParams","amount","order_id","setAmount","handleInputs","e","target","name","value","editInvoiceCreditData","obj","api","post","then","res","console","log","data","catch","finalapicall","receipt","results","j","length","invoice_id","credit_note_id","invoice_code","item_title","description","modified_by","editCreditData","code","credit_note_code","insertId","window","location","reload","totalValue","getAllValues","type","result","$","each","allValues","this","find","fieldName","attr","val","push","forEach","parseFloat","crediteNote","setCreditNote","useEffect","size","isOpen","color","onClick","md","className","selector","grow","wrap","width","sortable","map","cell","element","invoice_amount","onChange","from_date","remarks"],"mappings":"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","file":"static/js/235.c489b4ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  CardBody,\n  Row,\n  Col,\n  Form,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Table,\n  Input,\n  Label,\n} from 'reactstrap';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport $ from 'jquery';\nimport api from '../../constants/api';\n\nconst CreateNote = ({ editCreateNote, setEditCreateNote }) => {\n  CreateNote.propTypes = {\n    editCreateNote: PropTypes.bool,\n    setEditCreateNote: PropTypes.func,\n  };\n  const [createNoteAmount, setCreateNoteAmount] = useState(null);\n  const [createInvoiceNote, setCreateInvoiceNote] = useState(null);\n  //edit Tab Costing Summary Form\n  const { id } = useParams();\n\n  const [amount, setAmount] = useState({\n    amount: 0,\n    order_id: id,\n  });\n  const handleInputs = (e) => {\n    setCreateNoteAmount({ ...createNoteAmount, [e.target.name]: e.target.value });\n  };\n\n  const editInvoiceCreditData = (obj) => {\n    api\n      .post('/finance/insertcredit_note_history', obj)\n      .then((res) => {\n        console.log('Inserted successfully.');\n        setCreateInvoiceNote(res.data.data);\n        //  window.location.reload()\n      })\n      .catch(() => {\n        console.log('Network connection error.');\n      });\n  };\n\n  const finalapicall = (receipt, results) => {\n\n    // Insert Receipt History\n\n    for (let j = 0; j < results.length; j++) {\n      if (results[j].amount !== '') {\n        editInvoiceCreditData({\n          invoice_id: results[j].invoice_id,\n          credit_note_id: receipt,\n          invoice_code: results[j].invoice_code,\n          item_title: results[j].item_title,\n          amount: results[j].amount,\n          description: results[j].description,\n          modified_by: '',\n        });\n      }\n    }\n  };\n\n  const editCreditData = async(results,code) => {\n    amount.credit_note_code = code;\n    api\n      .post('/finance/insertcredit_note', amount)\n      .then((res) => {\n        console.log('Inserted successfully.');\n        console.log('amount', amount);\n        setCreateNoteAmount(res.data.data);\n        finalapicall(res.data.data.insertId, results);\n        window.location.reload();\n      })\n      .catch(() => {\n        console.log('Network connection error.');\n      });\n  };\n\n  //generateCode\n  const generateCode = (results, type) => {\n    api\n      .post('/commonApi/getCodeValue', { type })\n      .then((res) => {\n        editCreditData(results, res.data.data);\n      })\n      .catch(() => {\n        editCreditData(results, '');\n      });\n  };\n  let totalValue = 0;\n  const getAllValues = () => {\n    const result = [];\n\n    $('.display tbody tr').each(function input() {\n      const allValues = {};\n      $(this)\n        .find('input')\n        .each(function output() {\n          const fieldName = $(this).attr('name');\n          allValues[fieldName] = $(this).val();\n        });\n      result.push(allValues);\n    });\n    console.log(result);\n    result.forEach((e) => {\n      if (e.amount) {\n        totalValue += parseFloat(e.amount) + (7 / 100) * e.amount;\n      }\n      amount.amount = totalValue;\n    });\n    setAmount({ amount: totalValue });\n    generateCode(result, 'creditNote');\n    console.log(totalValue);\n\n    result.forEach((obj) => {\n      if (obj.item_title !== '' && obj.description && obj.amount) {\n        editInvoiceCreditData(obj, totalValue);\n      }\n    });\n\n    // editCreditData(amount);\n  };\n\n  const [crediteNote, setCreditNote] = useState(null);\n  const getCredit = () => {\n    api.post('/invoice/getInvoiceById', { order_id: id }).then((res) => {\n      setCreditNote(res.data.data);\n      // console.log(res.data.data)\n    });\n  };\n  console.log('creditnote', crediteNote);\n  useEffect(() => {\n    getCredit();\n  }, [id]);\n\n  const columns = [\n    {\n      name: 'Invoice Code',\n      selector: 'invoice_code',\n      grow: 0,\n      wrap: true,\n      width: '4%',\n    },\n    {\n      name: 'Amount',\n      selector: 'invoice_amount',\n      grow: 0,\n      width: '1%',\n      wrap: true,\n    },\n    {\n      name: 'Invoice Id',\n      selector: 'invoice_id',\n      grow: 0,\n      width: '1%',\n      wrap: true,\n    },\n    {\n      name: 'Title',\n      selector: ' ',\n      sortable: true,\n      grow: 0,\n      wrap: true,\n    },\n    {\n      name: 'Description',\n      selector: ' ',\n      sortable: true,\n      grow: 0,\n    },\n    {\n      name: 'Credit Amount',\n      selector: ' ',\n      sortable: true,\n      width: 'auto',\n      grow: 3,\n    },\n  ];\n\n  return (\n    <>\n      <Modal size=\"xl\" isOpen={editCreateNote}>\n        <ModalHeader>\n          Credit Note\n          <Button\n            color=\"secondary\"\n            onClick={() => {\n              setEditCreateNote(false);\n            }}\n          >\n            X\n          </Button>\n        </ModalHeader>\n\n        <ModalBody>\n          <Row>\n            <Col md=\"12\">\n              <Card>\n              <CardBody>\n                  <Form>\n                    <Row>\n                      <div className=\"container\">\n                        <Table id=\"example\" className=\"display\">\n                          <thead>\n                            <tr>\n                              {columns.map((cell) => {\n                                return <td key={cell.name}>{cell.name}</td>;\n                              })}\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {crediteNote &&\n                              crediteNote.map((element) => {\n                                return (\n                                  <tr key={element.invoice_code}>\n                                    <td>\n                                      <Input value={element.invoice_code} />{' '}\n                                    </td>\n                                    <td>{element.invoice_amount}</td>\n                                    <td>\n                                      <Input\n                                        type=\"text\"\n                                        name=\"invoice_id\"\n                                        value={element.invoice_id}\n                                      />\n                                    </td>\n                                    <td>\n                                      <Input\n                                        type=\"text\"\n                                        name=\"item_title\"\n                                        value={createInvoiceNote && createInvoiceNote.item_title}\n                                      ></Input>\n                                    </td>\n                                    <td>\n                                      <Input\n                                        type=\"text\"\n                                        name=\"description\"\n                                        value={createInvoiceNote && createInvoiceNote.description}\n                                      ></Input>\n                                    </td>\n                                    <td>\n                                      <Input\n                                        type=\"text\"\n                                        name=\"amount\"\n                                        value={createInvoiceNote && createInvoiceNote.amount}\n                                      ></Input>\n                                    </td>\n                                  </tr>\n                                );\n                              })}\n                          </tbody>\n                        </Table>\n                        <Label>Date</Label>\n                        <Input\n                          type=\"date\"\n                          name=\"from_date\"\n                          onChange={handleInputs}\n                          value={createNoteAmount && createNoteAmount.from_date}\n                        ></Input>\n                        <Label>Notes</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"remarks\"\n                          onChange={handleInputs}\n                          value={createNoteAmount && createNoteAmount.remarks}\n                        ></Input>\n                      </div>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            type=\"button\"\n            onClick={() => {\n              getAllValues();\n            }}\n          >\n            Submit\n          </Button>\n          <Button color=\"secondary\">Cancel</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default CreateNote;\n"],"sourceRoot":""}