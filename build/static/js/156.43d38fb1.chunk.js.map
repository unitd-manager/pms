{"version":3,"sources":["components/Message.js","layouts/breadcrumbs/BreadCrumbs.js","components/CreationModification.js","components/ComponentCard.js","views/detailTable/JobInformationDetails.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","CreationModification","details","title","modification_date","creation_date","ComponentCard","children","subtitle","creationModificationDate","JobInformationDetails","useState","employee","setEmployee","employee_id","first_name","fin_no","status","jobForms","setJobForms","id","useParams","navigate","useNavigate","useEffect","api","get","then","res","console","log","data","catch","md","name","onChange","e","target","value","handleInputs","selected","map","ele","e_count","color","onClick","post","insertedDataId","insertId","setTimeout"],"mappings":"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","file":"static/js/156.43d38fb1.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { useLocation, Link } from 'react-router-dom';\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\n\nconst BreadCrumbs = (prop) => {\n  const location = useLocation();\n  const firstUrl = location.pathname.split('/')[1];\n  const secondUrl = location.pathname.split('/')[2];\n  \n  return (\n    <>\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\n      <h4>{prop.heading}</h4>\n      <Breadcrumb>\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\n          Home\n        </BreadcrumbItem>\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadCrumbs;\n","import React from 'react';\nimport { CardTitle, Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default function CreationModification({ details = null, title }) {\n  CreationModification.propTypes = {\n    details: PropTypes.object,\n    title: PropTypes.string,\n  };\n  return (\n    <>\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\n        <Row>\n          <Col>{title}</Col>\n          {details && (\n            <Col>\n              <Row>\n                <small>Modification Date: {details && details.modification_date}</small>\n              </Row>\n              <Row className=\"d-flex\">\n                <small>Creation Date: {details && details.creation_date}</small>\n              </Row>\n            </Col>\n          )}\n        </Row>\n      </CardTitle>\n    </>\n  );\n}\n","import { Card, CardBody, CardSubtitle } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport CreationModification from './CreationModification';\n\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\n  return (\n    <Card className='shadow-none'>\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\n     \n      <CardBody className=\"p-4\">\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\n        <div>{children}</div>\n      </CardBody>\n    </Card>\n  );\n};\n\nComponentCard.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  subtitle: PropTypes.node,\n  creationModificationDate:PropTypes.any\n};\n\nexport default ComponentCard;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { ToastContainer } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\nimport ComponentCard from '../../components/ComponentCard';\nimport api from '../../constants/api';\nimport message from '../../components/Message';\n\nconst JobInformationDetails = () => {\n  //All state variables\n  const [employee, setEmployee] = useState();\n  const [jobForms, setJobForms] = useState({\n    employee_id: '',\n    first_name: '',\n    fin_no: '',\n    status:'current'\n  });\n  //Navigation and Parameters\n  const { id } = useParams();\n  const navigate = useNavigate();\n  // Gettind data from Job By Id\n  const editJobById = () => {\n    api\n      .get('/jobinformation/getEmployee')\n      .then((res) => {\n        console.log(res.data.data);\n        setEmployee(res.data.data);\n      })\n      .catch(() => {});\n  };\n  //jobinformation data in jobinformationDetails\n  const handleInputs = (e) => {\n    setJobForms({ ...jobForms, [e.target.name]: e.target.value });\n  };\n  //inserting data of job information\n  const insertJobInformation = () => {\n   \n    api\n      .post('/jobinformation/insertjob_information', jobForms)\n      .then((res) => {\n        const insertedDataId = res.data.data.insertId;\n        console.log(insertedDataId);\n        message('Job Information inserted successfully.', 'success');\n        setTimeout(() => {\n          navigate(`/JobInformationEdit/${insertedDataId}`);\n        }, 300);\n      })\n      .catch(() => {\n        message('Unable to edit record.', 'error');\n      });\n     \n  };\n  useEffect(() => {\n    editJobById();\n  }, [id]);\n  return (\n    <div>\n      <BreadCrumbs />\n      <Row>\n        <ToastContainer></ToastContainer>\n        <Col md=\"6\">\n          <ComponentCard title=\"Key Details\">\n            <Form>\n              <FormGroup>\n                <Row>\n                  <Label>Employee Name </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"employee_id\"\n                    onChange={(e) => {\n                      handleInputs(e);\n                    }}>\n                    <option value=\"\" selected >Please Select</option>\n                    {employee &&\n                      employee.map((ele) => {\n                        return (\n                          ele.e_count === 0 && (<option key={ele.employee_id} value={ele.employee_id}>\n                            {ele.first_name}\n                          </option>)\n                        );\n                      })}\n                  </Input>\n                </Row>\n                \n                <FormGroup>\n                  <Row>\n                    <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\n                      <Button color=\"primary\"\n                        type=\"button\"\n                        className=\"btn mr-2 shadow-none\"\n                        onClick={() => {\n                          insertJobInformation();\n                        }}>\n                        Save & Continue\n                      </Button>\n                      <Button\n                      onClick={() => {\n                        navigate('/JobInformation');\n                      }}\n                      type=\"button\"\n                      className=\"btn btn-dark shadow-none\">\n                        Cancel\n                      </Button>\n                    </div>\n                  </Row>\n                </FormGroup>\n              </FormGroup>\n            </Form>\n          </ComponentCard>\n        </Col>\n      </Row>\n    </div>\n  );\n};\nexport default JobInformationDetails;\n"],"sourceRoot":""}