{"version":3,"sources":["components/Message.js","components/Tender/EditQuoteModal.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","ComponentCard","React","lazy","EditQuoteModal","editQuoteModal","setEditQuoteModal","existingQuote","useState","quoteData","setQuoteData","conditions","setConditions","lineItem","setLineItem","handleData","e","target","name","value","handleDataEditor","draftToHtml","convertToRaw","getCurrentContent","useEffect","existingQuoteformal","quote_condition","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","editorState","EditorState","createWithContent","convertHtmlToDraftcondition","intro_drawing_quote","convertHtmlToDraft","size","isOpen","color","onClick","md","defaultValue","quote_date","onChange","quote_code","quote_status","selected","project_location","project_reference","payment_method","revision","inline","className","id","show_project_manager","for","wrapperClassName","editorClassName","onEditorStateChange","api","post","then","res","console","log","data","window","location","reload","catch"],"mappings":"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","file":"static/js/223.45cbe03c.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import React, { useState, useEffect } from 'react';\nimport {\n  Row,\n  Col,\n  FormGroup,\n  Input,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Label,\n  Form,\n} from 'reactstrap';\nimport { Editor } from 'react-draft-wysiwyg';\nimport PropTypes from 'prop-types';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport api from '../../constants/api';\nimport message from '../Message';\n\nconst ComponentCard = React.lazy(() => import('../ComponentCard'));\n\nconst EditQuoteModal = ({ editQuoteModal, setEditQuoteModal, existingQuote }) => {\n  EditQuoteModal.propTypes = {\n    editQuoteModal: PropTypes.bool,\n    setEditQuoteModal: PropTypes.func,\n    existingQuote: PropTypes.object,\n  };\n\n  //   Get Quote Edited Value\n  const [quoteData, setQuoteData] = useState(existingQuote);\n  const [conditions, setConditions] = useState('');\n  const [lineItem, setLineItem] = useState('');\n\n  const handleData = (e) => {\n    setQuoteData({ ...quoteData, [e.target.name]: e.target.value });\n  };\n\n  const GetEditQuote = () => {\n    api\n      .post('/tender/edit-TabQuote', quoteData)\n      .then((res) => {\n        console.log('edit quote', res.data.data);\n        message('Quote Edited Successfully.', 'success');\n        window.location.reload();\n      })\n      .catch(() => {\n        message('Unable to edit quote. please fill all fields', 'error');\n      });\n  };\n\n  const handleDataEditor = (e, type) => {\n    setQuoteData({ ...quoteData, [type]: draftToHtml(convertToRaw(e.getCurrentContent())) });\n  };\n\n  const convertHtmlToDraftcondition = (existingQuoteformal) => {\n    if (existingQuoteformal && existingQuoteformal.quote_condition) {\n      const contentBlock = htmlToDraft(existingQuoteformal && existingQuoteformal.quote_condition);\n      if (contentBlock) {\n        const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n        const editorState = EditorState.createWithContent(contentState);\n        setConditions(editorState);\n      }\n    }\n  };\n\n  const convertHtmlToDraft = (existingQuoteformal) => {\n    if (existingQuoteformal && existingQuoteformal.intro_drawing_quote) {\n      const contentBlock = htmlToDraft(\n        existingQuoteformal && existingQuoteformal.intro_drawing_quote,\n      );\n      if (contentBlock) {\n        const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n        const editorState = EditorState.createWithContent(contentState);\n        setLineItem(editorState);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setQuoteData(existingQuote);\n    convertHtmlToDraftcondition(existingQuote);\n    convertHtmlToDraft(existingQuote);\n  }, [existingQuote]);\n\n  return (\n    <>\n      {/*  Edit Quote Modal */}\n      <Modal size=\"lg\" isOpen={editQuoteModal}>\n        <ModalHeader>\n          Edit Quote\n          <Button\n            color=\"secondary\"\n            onClick={() => {\n              setEditQuoteModal(false);\n            }}\n          >\n            X\n          </Button>\n        </ModalHeader>\n        <ModalBody>\n          <FormGroup>\n            <Form>\n              <FormGroup>\n                <ComponentCard>\n                  <Row>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Quote Date</Label>\n                        <Input\n                          type=\"date\"\n                          name=\"quote_date\"\n                          defaultValue={quoteData && quoteData.quote_date}\n                          onChange={handleData}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Quote Code</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"quote_code\"\n                          defaultValue={quoteData && quoteData.quote_code}\n                          onChange={handleData}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Quote Status</Label>\n                        <Input\n                          type=\"select\"\n                          name=\"quote_status\"\n                          defaultValue={quoteData && quoteData.quote_status}\n                          onChange={handleData}\n                        >\n                          <option selected=\"selected\" value=\"New\">\n                            New\n                          </option>\n                          <option value=\"Quoted\">Quoted</option>\n                          <option value=\"Awarded\">Awarded</option>\n                          <option value=\"Not Awarded\">Not Awarded</option>\n                          <option value=\"Cancelled\">Cancelled</option>\n                        </Input>\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Project Location</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"project_location\"\n                          defaultValue={quoteData && quoteData.project_location}\n                          onChange={handleData}\n                        />\n                      </FormGroup>\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Project Reference</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"project_reference\"\n                          defaultValue={quoteData && quoteData.project_reference}\n                          onChange={handleData}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Mode of Payment</Label>\n                        <Input\n                          type=\"select\"\n                          name=\"payment_method\"\n                          defaultValue={quoteData && quoteData.payment_method}\n                          onChange={handleData}\n                        >\n                          <option value=\"\">Please Select</option>\n                          <option value=\"15 days\">15 days</option>\n                          <option selected=\"selected\" value=\"30 days\">\n                            30 days\n                          </option>\n                          <option value=\"60 days\">60 days</option>\n                          <option value=\"COD\">COD</option>\n                        </Input>\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Quote Revision</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"revision\"\n                          defaultValue={quoteData && quoteData.revision}\n                          onChange={handleData}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <Label>Show Project Manager</Label>\n\n                      <Form inline>\n                        <div className=\"form-check form-check-inline\">\n                          <Input\n                            className=\"form-check-input\"\n                            id=\"inlineradio1\"\n                            type=\"radio\"\n                            name=\"show_project_manager\"\n                            value=\"1\"\n                            defaultValue={quoteData && quoteData.show_project_manager}\n                            onChange={handleData}\n                          />\n                          <Label for=\"inlineradio1\">yes</Label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                          <Input\n                            className=\"form-check-input\"\n                            id=\"inlineradio2\"\n                            type=\"radio\"\n                            name=\"show_project_manager\"\n                            value=\"0\"\n                            defaultValue={quoteData && quoteData.show_project_manager}\n                            onChange={handleData}\n                          />\n                          <Label for=\"inlineradio2\">No</Label>\n                        </div>\n                      </Form>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Label>Intro Line Items</Label>\n                  </Row>\n                  <Editor\n                    editorState={lineItem}\n                    wrapperClassName=\"demo-wrapper mb-0\"\n                    editorClassName=\"demo-editor border mb-4 edi-height\"\n                    onEditorStateChange={(e) => {\n                      handleDataEditor(e, 'intro_drawing_quote');\n                      setLineItem(e);\n                    }}\n                  />\n                  <Row>\n                    <Label>Terms & Condition</Label>\n                  </Row>\n                  <Editor\n                    editorState={conditions}\n                    wrapperClassName=\"demo-wrapper mb-0\"\n                    editorClassName=\"demo-editor border mb-4 edi-height\"\n                    onEditorStateChange={(e) => {\n                      handleDataEditor(e, 'quote_condition');\n                      setConditions(e);\n                    }}\n                  />\n\n                  <Row>\n                    <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\n                      <Button\n                        type=\"button\"\n                        color=\"primary\"\n                        className=\"btn shadow-none mr-2\"\n                        onClick={GetEditQuote}\n                      >\n                        Save & Continue\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        className=\"shadow-none\"\n                        onClick={() => {\n                          setEditQuoteModal(false);\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </Row>\n                </ComponentCard>\n              </FormGroup>\n            </Form>\n          </FormGroup>\n        </ModalBody>\n      </Modal>\n      {/* END Edit Quote Modal */}\n    </>\n  );\n};\n\nexport default EditQuoteModal;\n"],"sourceRoot":""}