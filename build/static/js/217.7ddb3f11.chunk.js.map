{"version":3,"sources":["components/Message.js","../node_modules/react-feather/dist/icons/edit-2.js","views/smartconTables/ProjectTimesheet.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Edit2","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","propTypes","PropTypes","string","oneOfType","number","displayName","ProjectTimeSheet","addContactToggless","addContactModalss","setEditTimeSheetEditModal","id","timeSheetById","setContactDatass","getTimeSheetById","console","log","useState","task_title","first_name","date","hours","status","description","project_milestone_id","project_task_id","insertTimeSheet","setInsertTimesheet","employeeTime","setEmployee","handleInputsTime","e","name","value","milestones","setMilestones","taskdetail","setTaskDetail","getTaskName","projectId","api","post","then","res","data","catch","useEffect","get","project_id","selectedTask","Projecttimesheetcolumn","selector","cell","md","className","onClick","bind","isOpen","toggle","onChange","map","milestone_title","selected","ele","e_count","employee_id","moment","format","newContactWithCompany","insertedDataId","insertId","setTimeout","window","location","reload","inserttimeSheets","element","index","projecttimesheet_id"],"mappings":"8GAAA,oBAqDeA,IAlDC,SAACC,EAAIC,GACjB,MAAY,YAATA,EACOC,IAAMC,QAAQH,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,UAATX,EACMC,IAAMW,MAAMb,EAAK,CACnBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,SAATX,EACKC,IAAMY,KAAKd,EAAK,CAClBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAEK,YAATX,EACMC,IAAMa,QAAQf,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAGRV,YAAMF,K,iCCjDzB,6CAASgB,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,GAAkBH,EAASY,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAIoB,EAAQC,sBAAW,SAAUC,EAAMC,GACrC,IAAIC,EAAaF,EAAKG,MAClBA,OAAuB,IAAfD,EAAwB,eAAiBA,EACjDE,EAAYJ,EAAKK,KACjBA,OAAqB,IAAdD,EAAuB,GAAKA,EACnCE,EAAOjB,EAAyBW,EAAM,CAAC,QAAS,SAEpD,OAAoBO,IAAMC,cAAc,MAAOjC,EAAS,CACtD0B,IAAKA,EACLQ,MAAO,6BACPC,MAAOL,EACPM,OAAQN,EACRO,QAAS,YACTC,KAAM,OACNC,OAAQX,EACRY,YAAa,IACbC,cAAe,QACfC,eAAgB,SACfX,GAAoBC,IAAMC,cAAc,OAAQ,CACjDU,EAAG,gEAGPpB,EAAMqB,UAAY,CAChBhB,MAAOiB,IAAUC,OACjBhB,KAAMe,IAAUE,UAAU,CAACF,IAAUC,OAAQD,IAAUG,UAEzDzB,EAAM0B,YAAc,QACL1B,O,2KCZA,SAAS2B,EAAT,GAQX,IAPFC,EAOC,EAPDA,mBACAC,EAMC,EANDA,kBACAC,EAKC,EALDA,0BACAC,EAIC,EAJDA,GACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,iBAYAC,QAAQC,IAAI,gBAAgBJ,GAE5B,MAA8CK,mBAAS,CACrDC,WAAY,GACZC,WAAW,GACXC,KAAK,GACLC,MAAM,GACNC,OAAO,GACPC,YAAY,GACZC,qBAAqB,GACrBC,gBAAgB,KARlB,mBAAOC,EAAP,KAAwBC,EAAxB,KAWC,EAAkCV,qBAAlC,mBAAMW,EAAN,KAAmBC,EAAnB,KAaKC,EAAmB,SAACC,GACxBJ,EAAmB,2BAAKD,GAAN,kBAAwBK,EAAEvE,OAAOwE,KAAOD,EAAEvE,OAAOyE,UAqBrE,EAAoChB,mBAAS,IAA7C,mBAAOiB,EAAP,KAAmBC,EAAnB,KACA,EAAoClB,mBAAS,IAA7C,mBAAOmB,EAAP,KAAmBC,EAAnB,KAeMC,EAAc,SAACC,GACnBC,IACGC,KAAK,gCAAiC,CAAEjB,qBAAsBe,IAC9DG,MAAK,SAACC,GACLN,EAAcM,EAAIC,KAAKA,SAExBC,OAAM,WACLzG,YAAQ,iBAAkB,YAIjC0G,qBAAU,WA1DPN,IACGO,IAAI,+BACJL,MAAK,SAACC,GACL5B,QAAQC,IAAI2B,EAAIC,KAAKA,MACrBf,EAAYc,EAAIC,KAAKA,SAEtBC,OAAM,iBAsDR,CAAClC,IAEJmC,qBAAU,WA1BRN,IACGC,KAAK,sCAAsC,CAAEO,WAAYrC,IACzD+B,MAAK,SAACC,GACLR,EAAcQ,EAAIC,KAAKA,SAExBC,OAAM,WACLzG,YAAQ,sBAAuB,aAsBlC,CAACuE,IAEJmC,qBAAU,WACR,GAAIpB,EAAgBF,qBAAsB,CAExC,IAAMyB,EAAevB,EAAgBF,qBACrCc,EAAYW,MAEb,CAACvB,EAAgBF,uBAGpB,IAAM0B,EAAyB,CAC7B,CACElB,KAAM,KAGR,CACEA,KAAM,OACNmB,SAAU,OACVC,KAAM,kBAAM,cAAC,IAAD,MAGd,CACEpB,KAAM,SAGR,CACEA,KAAM,SAGR,CACEA,KAAM,QAGR,CACEA,KAAM,SAGR,CACEA,KAAM,UAGR,CACEA,KAAM,gBAIV,OACE,eAAC,IAAD,WACA,cAAC,KAAD,UACA,cAAC,IAAD,CAAKqB,GAAG,IAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAQpE,MAAM,UAAUqE,UAAU,cAAcC,QAAS/C,EAAmBgD,KAAK,MAAjF,oBACU,OAEV,eAAC,IAAD,CAAOrE,KAAK,KAAKsE,OAAQhD,EAAmBiD,OAAQlD,EAAmBgD,KAAK,MAA5E,UACE,cAAC,IAAD,CAAaE,OAAQlD,EAAmBgD,KAAK,MAA7C,sBACA,cAAC,IAAD,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAKH,GAAG,KAAR,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,KAAD,WACA,cAAC,IAAD,CAAKA,GAAG,IAAR,SACF,eAAC,IAAD,WACE,cAAC,IAAD,8BACA,eAAC,IAAD,CAAO/G,KAAK,SAAS0F,KAAK,uBAAyB2B,SAAU,SAAC5B,GAC5DD,EAAiBC,GACvB,IAAMkB,EAAelB,EAAEvE,OAAOyE,MAC9BK,EAAYW,IAHR,UAKE,oDACCf,GACCA,EAAW0B,KAAI,SAAC7B,GAAD,OACb,wBAA2BE,MAAOF,EAAEP,qBAApC,SACGO,EAAE8B,iBADQ9B,EAAEiB,uBAOzB,cAAC,IAAD,CAAKK,GAAG,IAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,eAAC,IAAD,CAAO/G,KAAK,SAAS0F,KAAK,kBAAkB2B,SAAU7B,EAAtD,UACE,iDACCM,GACCA,EAAWwB,KAAI,SAAC7B,GAAD,OACb,wBAEEE,MAAOF,EAAEN,gBAFX,SAIGM,EAAEb,YAHEa,EAAEP,iCASX,cAAC,IAAD,CAAK6B,GAAG,IAAR,SACI,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,eAAC,IAAD,CACE/G,KAAK,SACL0F,KAAK,cACL2B,SAAU,SAAC5B,GACTD,EAAiBC,IAJrB,UAOE,wBAAQE,MAAM,GAAG6B,UAAQ,EAAzB,2BAGClC,GACCA,EAAagC,KAAI,SAACG,GAChB,OACkB,IAAhBA,EAAIC,SACF,wBAA8B/B,MAAO8B,EAAIE,YAAzC,SACGF,EAAI5C,YADM4C,EAAIE,wBASnC,cAAC,IAAD,CAAKZ,GAAG,IAAR,SACF,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACE/G,KAAK,OACLqH,SAAU7B,EACVG,MACEP,GAAmBwC,IAAOxC,EAAgBN,MAAM+C,OAAO,cACzDnC,KAAK,cAIX,cAAC,IAAD,CAAKqB,GAAG,IAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,IAAD,CACE/G,KAAK,SACLqH,SAAU7B,EACVG,MAAOP,GAAmBA,EAAgBL,MAC1CW,KAAK,eAIX,cAAC,IAAD,CAAKqB,GAAG,IAAR,SACQ,eAAC,IAAD,WACF,cAAC,IAAD,qBACA,eAAC,IAAD,CACE/G,KAAK,SACL0F,KAAK,SACL2B,SAAU7B,EACVG,MAAOP,GAAmBA,EAAgBJ,OAJ5C,UAMG,IACD,wBAAQW,MAAM,GAAG6B,SAAS,WAA1B,2BAGA,wBAAQ7B,MAAM,UAAd,qBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,SAAd,4BAIR,cAAC,IAAD,CAAKoB,GAAG,IAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACE/G,KAAK,WACLqH,SAAU7B,EACVG,MAAOP,GAAmBA,EAAgBH,YAC1CS,KAAK,oCAWrB,eAAC,IAAD,WACE,cAAC,IAAD,CACEsB,UAAU,cACVrE,MAAM,UACNsE,QAAS,YAjPI,WACvB,IAAMa,EAAwB1C,EAC9B0C,EAAsBpB,WAAarC,EACnC6B,IAAIC,KAAK,oCAAqC2B,GAC3C1B,MAAK,SAACC,GACL,IAAM0B,EAAiB1B,EAAIC,KAAKA,KAAK0B,SACrCvD,QAAQC,IAAIqD,GACZjI,YAAQ,mCAAoC,WAC5C0E,IACAyD,YAAW,WAAO/D,GAAmB,KAAU,KAC/CgE,OAAOC,SAASC,YAGjB7B,OAAM,WACLzG,YAAQ,4BAA6B,YAoO7BuI,IAJJ,oBASA,cAAC,IAAD,CACE1F,MAAM,YACNqE,UAAU,cACVC,QAAS/C,EAAmBgD,KAAK,MAHnC,iCAYJ,eAAC,KAAD,CAAO7C,GAAG,UAAU2C,UAAU,0CAA9B,UACE,gCACE,6BACGJ,EAAuBU,KAAI,SAACR,GAC3B,OAAO,6BAAqBA,EAAKpB,MAAjBoB,EAAKpB,aAI3B,gCACGpB,GACCA,EAAcgD,KAAI,SAACgB,EAASC,GAC1B,OACE,+BACE,6BAAKA,EAAQ,IACb,6BACI,sBACEtB,QAAS,WACP1C,EAAiB+D,GACjBlE,GAA0B,IAH9B,SAMA,cAAC,IAAD,QAGJ,6BAAKkE,EAAQ1D,aACb,6BAAK0D,EAAQzD,aACf,6BAAK+C,IAAOU,EAAQxD,MAAM+C,OAAO,gBAC/B,6BAAKS,EAAQvD,QACb,6BAAKuD,EAAQtD,SACb,6BAAKsD,EAAQrD,gBAjBNqD,EAAQE","file":"static/js/217.7ddb3f11.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Edit2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"\n  }));\n});\nEdit2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nEdit2.displayName = 'Edit2';\nexport default Edit2;","import React, { useEffect, useState } from 'react';\nimport {\n  Row,\n  Form,\n  ModalFooter,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Card,\n  Table,\n  Label,\n  Input,\n  Col,\n  FormGroup,\n  Button,\n  CardBody,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport * as Icon from 'react-feather';\nimport moment from 'moment';\nimport message from '../../components/Message';\nimport api from '../../constants/api';\n\nexport default function ProjectTimeSheet({\n  addContactToggless,\n  addContactModalss,\n  setEditTimeSheetEditModal,\n  id,\n  timeSheetById,\n  setContactDatass,\n  getTimeSheetById,\n}) {\n  ProjectTimeSheet.propTypes = {\n    addContactToggless: PropTypes.func,\n    setEditTimeSheetEditModal: PropTypes.func,\n    addContactModalss: PropTypes.bool,\n    id:PropTypes.any,\n    timeSheetById:PropTypes.any,\n    setContactDatass:PropTypes.func,\n    getTimeSheetById:PropTypes.func,\n  };\n\n  console.log(\"timeSheetById\",timeSheetById)\n  \n  const [insertTimeSheet, setInsertTimesheet] = useState({\n    task_title: \"\",\n    first_name:\"\",\n    date:\"\",\n    hours:\"\",\n    status:\"\",\n    description:\"\",\n    project_milestone_id:\"\",\n    project_task_id:\"\"\n  });\n\n   const[employeeTime,setEmployee] = useState()\n\n    // Gettind data from Job By Id\n  const editJobById = () => {\n    api\n      .get('/jobinformation/getEmployee')\n      .then((res) => {\n        console.log(res.data.data);\n        setEmployee(res.data.data);\n      })\n      .catch(() => {});\n  };\n//Milestone data in milestoneDetails\n  const handleInputsTime = (e) => {\n    setInsertTimesheet({ ...insertTimeSheet, [e.target.name]: e.target.value });\n  };\n//Insert Milestone\n  const inserttimeSheets = () => {\n    const newContactWithCompany = insertTimeSheet;\n    newContactWithCompany.project_id = id;\n    api.post('/projecttimesheet/insertTimeSheet', newContactWithCompany)\n      .then((res) => {\n        const insertedDataId = res.data.data.insertId;\n        console.log(insertedDataId);\n        message('TimeSheet inserted successfully.', 'success');\n        getTimeSheetById();\n        setTimeout(() => {addContactToggless(false) }, 300);\n        window.location.reload();\n        \n      })\n      .catch(() => {\n        message('Network connection error.', 'error');\n      });\n    \n  };\n  const [milestones, setMilestones] = useState([]);\n  const [taskdetail, setTaskDetail] = useState([]);\n\n   // Api call for getting project name dropdown\n   const getMilestoneName = () => {\n    api\n      .post('/projecttimesheet/getMilestoneTitle',{ project_id: id })\n      .then((res) => {\n        setMilestones(res.data.data);\n      })\n      .catch(() => {\n        message('Milestone not found', 'info');\n      });\n  };\n\n  // Api call for getting milestone dropdown based on project ID\n  const getTaskName = (projectId) => {\n    api\n      .post('/projecttimesheet/getTaskByID', { project_milestone_id: projectId })\n      .then((res) => {\n        setTaskDetail(res.data.data);\n      })\n      .catch(() => {\n        message('Task not found', 'info');\n      });\n  };\n\n useEffect(() => {\n    editJobById();\n  }, [id]);\n\n  useEffect(() => { \n    getMilestoneName();\n  }, [id]);\n\n  useEffect(() => {\n    if (insertTimeSheet.project_milestone_id) {\n      // Use taskdetails.project_milestone_id directly to get the selected project ID\n      const selectedTask = insertTimeSheet.project_milestone_id;\n      getTaskName(selectedTask);\n    }\n  }, [insertTimeSheet.project_milestone_id]);\n\n  //Structure of timeSheetById list view\n  const Projecttimesheetcolumn = [\n    {\n      name: '#',\n     \n    },\n    {\n      name: 'Edit',\n      selector: 'edit',\n      cell: () => <Icon.Edit2 />,\n     \n    },\n    {\n      name: 'Title',\n     \n    },\n    {\n      name: 'Staff',\n     \n    },\n    {\n      name: 'Date',\n      \n    },\n    {\n      name: 'Hours',\n      \n    },\n    {\n      name: 'Status',\n      \n    },\n    {\n      name: 'Description',\n      \n    },\n  ];\n  return (\n    <Form>\n    <Row>\n    <Col md=\"3\">\n      <FormGroup>\n        <Button color=\"primary\" className=\"shadow-none\" onClick={addContactToggless.bind(null)}>\n          Add New{' '}\n        </Button>\n        <Modal size=\"xl\" isOpen={addContactModalss} toggle={addContactToggless.bind(null)}>\n          <ModalHeader toggle={addContactToggless.bind(null)}>New Task</ModalHeader>\n          <ModalBody>\n            <Row>\n              <Col md=\"12\">\n                <Card>\n                  <CardBody>\n                    <Form>\n                      <Row>\n                      <Col md=\"4\">\n                    <FormGroup>\n                      <Label>Milestone Title</Label>\n                      <Input type=\"select\" name=\"project_milestone_id\"   onChange={(e) => {\n                        handleInputsTime(e)\n                  const selectedTask = e.target.value;\n                  getTaskName(selectedTask);\n                }}>\n                        <option>Select Project</option>\n                        {milestones &&\n                          milestones.map((e) => (\n                            <option key={e.project_id} value={e.project_milestone_id}>\n                              {e.milestone_title}\n                            </option>\n                          ))}\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"4\">\n                    <FormGroup>\n                      <Label>Task</Label>\n                      <Input type=\"select\" name=\"project_task_id\" onChange={handleInputsTime}>\n                        <option>Select Task</option>\n                        {taskdetail &&\n                          taskdetail.map((e) => (\n                            <option\n                              key={e.project_milestone_id}\n                              value={e.project_task_id}\n                            >\n                              {e.task_title}\n                            </option>\n                          ))}\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                          <Col md=\"4\">\n                              <FormGroup>\n                                <Label>Staff</Label>\n                                <Input\n                                  type=\"select\"\n                                  name=\"employee_id\"\n                                  onChange={(e) => {\n                                    handleInputsTime(e);\n                                  }}\n                                >\n                                  <option value=\"\" selected>\n                                    Please Select\n                                  </option>\n                                  {employeeTime &&\n                                    employeeTime.map((ele) => {\n                                      return (\n                                        ele.e_count === 0 && (\n                                          <option key={ele.employee_id} value={ele.employee_id}>\n                                            {ele.first_name}\n                                          </option>\n                                        )\n                                      );\n                                    })}\n                                </Input>\n                              </FormGroup>\n                            </Col>\n                        <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Date</Label>\n                        <Input\n                          type=\"date\"\n                          onChange={handleInputsTime}\n                          value={\n                            insertTimeSheet && moment(insertTimeSheet.date).format('YYYY-MM-DD')} \n                          name=\"date\"\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Hours</Label>\n                        <Input\n                          type=\"number\"\n                          onChange={handleInputsTime}\n                          value={insertTimeSheet && insertTimeSheet.hours}\n                          name=\"hours\"\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"4\">\n                            <FormGroup>\n                          <Label>Status</Label>\n                          <Input\n                            type=\"select\"\n                            name=\"status\"\n                            onChange={handleInputsTime}\n                            value={insertTimeSheet && insertTimeSheet.status}\n                            >\n                            {' '}\n                            <option value=\"\" selected=\"selected\">\n                              Please Select\n                            </option>\n                            <option value=\"Pending\">Pending</option>\n                            <option value=\"InProgress\">InProgress</option>\n                            <option value=\"Completed\">Completed</option>\n                            <option value=\"OnHold\">OnHold</option>\n                          </Input>\n                        </FormGroup>\n                            </Col>\n                    <Col md=\"3\">\n                      <FormGroup>\n                        <Label>Description</Label>\n                        <Input\n                          type=\"textarea\"\n                          onChange={handleInputsTime}\n                          value={insertTimeSheet && insertTimeSheet.description}\n                          name=\"description\"\n                        />\n                      </FormGroup>\n                    </Col>\n               </Row>\n                    </Form>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"shadow-none\"\n              color=\"primary\"\n              onClick={() => {\n                inserttimeSheets();\n              }}\n            >\n              Submit\n            </Button>\n            <Button\n              color=\"secondary\"\n              className=\"shadow-none\"\n              onClick={addContactToggless.bind(null)}\n            >\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </FormGroup>\n    </Col>\n  </Row>\n        <Table id=\"example\" className=\"display border border-secondary rounded\">\n          <thead>\n            <tr>\n              {Projecttimesheetcolumn.map((cell) => {\n                return <td key={cell.name}>{cell.name}</td>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {timeSheetById &&\n              timeSheetById.map((element, index) => {\n                return (\n                  <tr key={element.projecttimesheet_id}>\n                    <td>{index + 1}</td>\n                    <td>\n                        <span\n                          onClick={() => {\n                            setContactDatass(element);\n                            setEditTimeSheetEditModal(true);\n                          }}\n                        >\n                        <Icon.Edit2 />\n                        </span>\n                    </td>\n                    <td>{element.task_title}</td>\n                    <td>{element.first_name}</td>\n                  <td>{moment(element.date).format('YYYY-MM-DD')}</td>\n                    <td>{element.hours}</td>\n                    <td>{element.status}</td>\n                    <td>{element.description}</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n        </Form>\n  );\n};\n\n"],"sourceRoot":""}