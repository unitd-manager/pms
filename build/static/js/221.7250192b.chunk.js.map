{"version":3,"sources":["components/Message.js","components/FinanceTable/CreateReceipt.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreateReceipt","editCreateReceipt","setEditCreateReceipt","useState","invoiceReceipt","setInvoiceReceipt","id","useParams","totalAmount","setTotalAmount","amount","order_id","receipt_status","receipt_date","moment","receipt_code","createReceipt","setCreateReceipt","selectedInvoice","setSelectedInvoice","handleInputreceipt","e","target","name","parseInt","value","editInvoicePartialStatus","invoiceId","Status","api","post","invoice_id","status","then","catch","insertReceiptHistory","createReceiptHistory","window","location","reload","finalCalculation","receipt","leftamount","j","length","remainingAmount","parseFloat","paid","receipt_id","published","flag","creation_date","modification_date","created_by","modified_by","site_id","partiallyPaid","insertReceipt","code","mode_of_payment","res","data","insertId","invoices","result","useEffect","datafromapi","forEach","element","invoice_amount","prev_amount","filter","el","size","isOpen","className","color","onClick","md","map","singleInvoiceObj","check","onChange","invObj","checkboxVal","receiptObj","checked","toString","push","addAndDeductAmount","arr","objWithIdIndex","findIndex","obj","splice","removeObjectWithId","invoice_code","defaultValue","format","selected","cheque_no","cheque_date","bank_name","remarks"],"mappings":"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","file":"static/js/221.7250192b.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst message = (msg,type) => {\n    if(type === 'success'){\n       return toast.success(msg, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"colored\",\n            });\n    } if(type === 'error'){\n        return toast.error(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n     } if(type === 'info'){\n        return toast.info(msg, {\n             position: \"top-right\",\n             autoClose: 5000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             theme: \"colored\",\n             });\n            }if(type === 'warning'){\n               return toast.warning(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    theme: \"colored\",\n                    });\n                   }\n            return toast(msg);\n   \n  \n}\nexport default message\n","import React, { useEffect, useState } from 'react';\nimport {\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport api from '../../constants/api';\nimport message from '../Message';\n\nconst CreateReceipt = ({ editCreateReceipt, setEditCreateReceipt }) => {\n  CreateReceipt.propTypes = {\n    editCreateReceipt: PropTypes.bool,\n    setEditCreateReceipt: PropTypes.func,\n  };\n  //All const Variable\n  const [invoiceReceipt, setInvoiceReceipt] = useState();\n  const { id } = useParams();\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [createReceipt, setCreateReceipt] = useState({\n    amount: 0,\n    order_id:id,\n    receipt_status:\"Paid\",\n    receipt_date:moment(),\n    receipt_code: '',\n  });\n  const [selectedInvoice, setSelectedInvoice] = useState([]);\n  //Setting Data in createReceipt\n  const handleInputreceipt = (e) => {\n    if(e.target.name === 'amount'){\n      // eslint-disable-next-line\n      setTotalAmount(parseInt(e.target.value))\n    }\n    setCreateReceipt({ ...createReceipt, [e.target.name]: e.target.value });\n  };\n\n  const editInvoiceStatus = (invoiceId, Status) => {\n    api\n      .post('/invoice/editInvoiceStatus', {\n        invoice_id: invoiceId,\n        status: Status,\n      })\n      .then(() => {\n        message('data inserted successfully.');\n      })\n      .catch(() => {\n        message('Network connection error.');\n      });\n  };\n  const editInvoicePartialStatus = (invoiceId, Status) => {\n    api\n      .post('/invoice/editInvoicePartialStatus', {\n        invoice_id: invoiceId,\n        status: Status,\n      })\n      .then(() => {\n        message('data inserted successfully.');\n      })\n      .catch(() => {\n        message('Network connection error.');\n      });\n  };\n  \n  const insertReceiptHistory = (createReceiptHistory) => {\n    api\n      .post('/finance/insertInvoiceReceiptHistory', createReceiptHistory)\n      .then(() => {\n        message('data inserted successfully.');\n        window.location.reload()\n      })\n      .catch(() => {\n        message('Network connection error.');\n      });\n  };\n  \n  //Logic for deducting receipt amount\n  const finalCalculation = (receipt) => {\n    let leftamount = totalAmount \n    // selectedInvoice.forEach(element => {\n    //   if(element.prev_amount < leftamount){\n    //     leftamount = parseFloat(leftamount) - element.prev_amount\n    //     element.paid = true\n    //   }\n     \n    // });\n     // Insert Receipt History\n  \n    for (let j = 0; j < selectedInvoice.length; j++){\n\n      if(selectedInvoice[j].remainingAmount <= leftamount){\n        leftamount = parseFloat(leftamount) - selectedInvoice[j].remainingAmount\n        selectedInvoice[j].paid = true;\n        editInvoiceStatus(selectedInvoice[j].invoice_id, 'Paid');\n        insertReceiptHistory({\n          invoice_id: selectedInvoice[j].invoice_id,\n              receipt_id: receipt,\n              published: '1',\n              flag: '1',\n              creation_date: '',\n              modification_date: '',\n              created_by: 'admin',\n              modified_by: 'admin',\n              amount: selectedInvoice[j].remainingAmount,\n              site_id: '1'\n        })\n        \n      }else{\n        selectedInvoice[j].partiallyPaid = true;\n        editInvoicePartialStatus(selectedInvoice[j].invoice_id, 'Partial Payment');\n        insertReceiptHistory({\n          invoice_id: selectedInvoice[j].invoice_id,\n              receipt_id: receipt,\n              published: '1',\n              flag: '1',\n              creation_date: '',\n              modification_date: '',\n              created_by: 'admin',\n              modified_by: 'admin',\n              amount:leftamount,\n              site_id: '1',\n             \n        })\n      }\n      }\n  };\n  \n\n  //Insert Receipt\n  const insertReceipt =async (code)=> {\n    createReceipt.receipt_code = code;\n    // createReceipt.receipt_date = moment()\n    if (createReceipt.mode_of_payment && (selectedInvoice.length>0)){\n    if(totalAmount>=createReceipt.amount) {\n    api\n      .post('/finance/insertreceipt', createReceipt)\n      .then((res) => {\n        message('data inserted successfully.');\n          finalCalculation(res.data.data.insertId)\n      })\n      .catch(() => {\n        message('Network connection error.');\n      });\n    }\n    else {\n      message('Please fill all required fields', 'warning');\n   }\n  }\n  };\n  const generateCode = () => {\n    api\n      .post('/commonApi/getCodeValue', { type:'receipt'})\n      .then((res) => {\n        insertReceipt(res.data.data);\n      })\n      .catch(() => {\n        insertReceipt('');\n      });\n  };\n  let invoices = [];\n  const removeObjectWithId = (arr, invoiceId) => {\n    const objWithIdIndex = arr.findIndex((obj) => obj.invoiceId === invoiceId);\n\n    if (objWithIdIndex > -1) {\n      arr.splice(objWithIdIndex, 1);\n    }\n\n    return arr;\n  };\n  const getInvoices = (checkboxVal, invObj) => {\n    if (checkboxVal.target.checked === true) {\n      setSelectedInvoice([...selectedInvoice, invObj]);\n    } else {\n      invoices = removeObjectWithId(invoiceReceipt, invObj.invoice_code);\n      setSelectedInvoice(invoices);\n    }\n  };\n\n\n\n  // const insertInvoices = () => {\n  //   invoices.forEach((obj) => {\n  //     insertReceiptHistory(obj);\n  //   });\n  // };\n\n  //Getting receipt data by order id\n  const getinvoiceReceipt = () => {\n    api.post('/invoice/getInvoiceReceiptById', { order_id: id }).then((res) => {\n      const datafromapi = res.data.data\n      datafromapi.forEach(element => {\n        element.remainingAmount = element.invoice_amount - element.prev_amount\n      });\n      const result = datafromapi.filter(el=>{return el.invoice_amount !== el.prev_amount});\n      setInvoiceReceipt(result);\n    });\n  };\n  //Calculation for Invoice checkbox amount\n  const result = [];\n  const addAndDeductAmount = (checkboxVal, receiptObj) => {\n    const remainingAmount = receiptObj.invoice_amount - receiptObj.prev_amount\n    if (checkboxVal.target.checked === true) {\n      setTotalAmount(parseFloat(totalAmount) + parseFloat(remainingAmount));\n      setCreateReceipt({\n        ...createReceipt,\n        amount: (parseFloat(createReceipt.amount) + parseFloat(remainingAmount)).toString(),\n      });\n      result.push(remainingAmount);\n    } else {\n      setTotalAmount(parseFloat(totalAmount) - parseFloat(remainingAmount));\n      setCreateReceipt({\n        ...createReceipt,\n        amount: parseFloat(createReceipt.amount) - parseFloat(remainingAmount),\n      });\n    }\n    \n  };\n  \n  useEffect(() => {\n    getinvoiceReceipt();\n  }, [id]);\n  return (\n    <>\n      <Modal size=\"md=6\" isOpen={editCreateReceipt}>\n         <ModalHeader>\n          Create Receipt\n          <Button className='shadow-none'\n            color=\"secondary\"\n            onClick={() => {\n              setEditCreateReceipt(false);\n            }}\n          >\n            X\n          </Button>\n        </ModalHeader>\n        <ModalBody>\n          <Row>\n            <Col md=\"12\">\n                  <Form>\n                    {invoiceReceipt &&\n                      invoiceReceipt.map((singleInvoiceObj) => {\n                        return (\n                          <Row key={singleInvoiceObj.invoice_id}>\n                            <Col md=\"12\">\n                              <FormGroup check>\n                                <Input\n                                  onChange={(e) => {\n                                    addAndDeductAmount(e, singleInvoiceObj);\n                                    getInvoices(e, singleInvoiceObj);\n                                  }}\n                                  name=\"invoice_code(prev_amount)\"\n                                  type=\"checkbox\"\n                                />\n                                <span>\n                                  {singleInvoiceObj.invoice_code}({singleInvoiceObj.invoice_amount})\n                                  Paid - {singleInvoiceObj.prev_amount}\n                                </span>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                        );\n                      })}\n                    <br></br>\n                    { invoiceReceipt && invoiceReceipt.length>0?\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <Label>Amount</Label>\n                          <Input\n                            type=\"text\"\n                            onChange={handleInputreceipt}\n                            value={createReceipt && createReceipt.amount}\n                            defaultValue={totalAmount.toString()}\n                            name=\"amount\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <Label>Date</Label>\n                          <Input\n                            type=\"date\"\n                            onChange={handleInputreceipt}\n                            value={createReceipt && moment(createReceipt.receipt_date).format('YYYY-MM-DD')}\n                            name=\"receipt_date\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <Label>{' '}Mode Of Payment <span className=\"required\">*</span>{' '}</Label>\n                          <Input type=\"select\" name=\"mode_of_payment\" onChange={handleInputreceipt}>\n                            <option value=\"\" selected=\"selected\">\n                              Please Select\n                            </option>\n                            <option value=\"cash\">Cash</option>\n                            <option value=\"cheque\">Cheque</option>\n                            <option value=\"giro\">Giro</option>\n                          </Input>\n                        </FormGroup>\n                      </Col>\n                      {createReceipt && createReceipt.mode_of_payment === 'cheque' && (\n                        <Col md=\"12\">\n                          <FormGroup>\n                            <Label>Check No</Label>\n                            <Input\n                              type=\"numbers\"\n                              onChange={handleInputreceipt}\n                              value={createReceipt && createReceipt.cheque_no}\n                              name=\"cheque_no\"\n                            />\n                          </FormGroup>\n                        </Col>\n                      )}\n                      {createReceipt && createReceipt.mode_of_payment === 'cheque' && (\n                        <Col md=\"12\">\n                          <FormGroup>\n                            <Label>Check date</Label>\n                            <Input\n                              type=\"date\"\n                              onChange={handleInputreceipt}\n                              value={createReceipt && createReceipt.cheque_date}\n                              name=\"cheque_date\"\n                            />\n                          </FormGroup>\n                        </Col>\n                      )}\n                      {createReceipt && createReceipt.mode_of_payment === 'cheque' && (\n                        <Col md=\"12\">\n                          <FormGroup>\n                            <Label>Bank</Label>\n                            <Input\n                              type=\"numbers\"\n                              onChange={handleInputreceipt}\n                              value={createReceipt && createReceipt.bank_name}\n                              name=\"bank_name\"\n                            />\n                          </FormGroup>\n                        </Col>\n                      )}\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <Label>Notes</Label>\n                          <Input\n                            type=\"text\"\n                            onChange={handleInputreceipt}\n                            defaultValue={createReceipt && createReceipt.remarks}\n                            name=\"remarks\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>:<span>Sorry</span>}\n                  </Form>\n            </Col>\n          </Row>\n        </ModalBody>\n        <ModalFooter>\n          <Button className='shadow-none'\n            color=\"primary\"\n            onClick={() => {\n              generateCode();\n              //insertReceipt();\n              //insertInvoices();\n            }}\n          >\n            {' '}\n            Submit{' '}\n          </Button>\n          <Button className='shadow-none'\n            color=\"secondary\"\n            onClick={() => {\n              setEditCreateReceipt(false);\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default CreateReceipt;\n"],"sourceRoot":""}